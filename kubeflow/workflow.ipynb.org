{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Earthquake Detection Workflow using QuakeFlow\n",
    "\n",
    "## Outline\n",
    "\n",
    "Here we show an example of the current modules in QuakeFlow\n",
    "\n",
    "1. Download data using Obpsy:\n",
    "\n",
    "    [FDSN web service client for ObsPy](https://docs.obspy.org/packages/obspy.clients.fdsn.html#module-obspy.clients.fdsn)\n",
    "    \n",
    "    [Mass Downloader for FDSN Compliant Web Services](https://docs.obspy.org/packages/autogen/obspy.clients.fdsn.mass_downloader.html#module-obspy.clients.fdsn.mass_downloader)\n",
    "\n",
    "2. PhaseNet for picking P/S phases\n",
    "\n",
    "    Find more details in [PhaseNet github page](https://wayneweiqiang.github.io/PhaseNet/)\n",
    "\n",
    "3. GaMMA for associating picking and estimate approximate location and magnitude\n",
    "\n",
    "    Find more details in [GaMMA github page](https://wayneweiqiang.github.io/GaMMA/)\n",
    "    \n",
    "4. Earthquake location, magnitude estimation, etc.\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 0. Install [miniconda](https://docs.conda.io/en/latest/miniconda.html) and download packages"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2021-07-23T07:24:29.845680Z",
     "iopub.status.busy": "2021-07-23T07:24:29.845272Z",
     "iopub.status.idle": "2021-07-23T07:24:29.922435Z",
     "shell.execute_reply": "2021-07-23T07:24:29.917867Z",
     "shell.execute_reply.started": "2021-07-23T07:24:29.845649Z"
    },
    "tags": []
   },
   "source": [
    "```\n",
    "git clone https://github.com/wayneweiqiang/PhaseNet.git\n",
    "git clone https://github.com/wayneweiqiang/GaMMA.git\n",
    "conda env update -f=env.yml -n base\n",
    "```\n",
    "\n",
    "**Second option: install to quakeflow environment, but need to select jupyter notebook kernel to quakeflow**\n",
    "```\n",
    "conda env create -f=env.yml -n quakeflow\n",
    "python -m ipykernel install --user --name=quakeflow\n",
    "```"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "import warnings\n",
    "\n",
    "import kfp\n",
    "import kfp.components as comp\n",
    "import kfp.dsl as dsl\n",
    "from kfp.components import InputPath, OutputPath\n",
    "\n",
    "warnings.filterwarnings(\"ignore\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 1. Set configurations"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "import os\n",
    "\n",
    "import matplotlib\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "matplotlib.use(\"agg\")\n",
    "%matplotlib inline\n",
    "\n",
    "region_name = \"Demo\"\n",
    "# region_name = \"Ridgecrest\"\n",
    "# region_name = \"SaltonSea\"\n",
    "# region_name = \"Ridgecrest\"\n",
    "# region_name = \"SanSimeon\"\n",
    "# region_name = \"Italy\"\n",
    "# region_name = \"PNSN\"\n",
    "# region_name = \"Hawaii2\"\n",
    "# region_name = \"SierraNegra\"\n",
    "# region_name = \"PuertoRico\"\n",
    "# region_name = \"SmithValley\"\n",
    "# region_name = \"Antilles\"\n",
    "# region_name = \"LongValley\"\n",
    "\n",
    "dir_name = region_name\n",
    "if not os.path.exists(dir_name):\n",
    "    os.mkdir(dir_name)\n",
    "root_dir = lambda x: os.path.join(dir_name, x)\n",
    "\n",
    "run_local = True"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "def set_config(\n",
    "    region_name,\n",
    "    index_json: OutputPath(\"json\"),\n",
    "    config_json: OutputPath(\"json\"),\n",
    "    datetime_json: OutputPath(\"json\"),\n",
    "    num_parallel: int = 1,\n",
    "    bucket_name: str = \"catalogs\",\n",
    "    s3_url: str = \"minio-service:9000\",\n",
    "    secure: bool = True,\n",
    ") -> list:\n",
    "\n",
    "    import datetime\n",
    "    import json\n",
    "    import os\n",
    "    import pickle\n",
    "\n",
    "    import numpy as np\n",
    "    import obspy\n",
    "\n",
    "    degree2km = np.pi * 6371 / 180\n",
    "\n",
    "    if region_name == \"Demo\":\n",
    "        center = (-117.504, 35.705)\n",
    "        horizontal_degree = 1.0\n",
    "        vertical_degree = 1.0\n",
    "        starttime = obspy.UTCDateTime(\"2019-07-04T17\")\n",
    "        endtime = obspy.UTCDateTime(\"2019-07-04T19\")\n",
    "        client = \"SCEDC\"\n",
    "        network_list = [\"CI\"]\n",
    "        channel_list = \"HH*,BH*,EH*,HN*\"\n",
    "\n",
    "    if region_name == \"Ridgecrest\":\n",
    "        center = (-117.504, 35.705)\n",
    "        horizontal_degree = 1.0\n",
    "        vertical_degree = 1.0\n",
    "        starttime = obspy.UTCDateTime(\"2019-07-04T00\")\n",
    "        endtime = obspy.UTCDateTime(\"2019-07-10T00\")\n",
    "        client = \"SCEDC\"\n",
    "        network_list = [\"CI\"]\n",
    "        channel_list = \"HH*,BH*,EH*,HN*\"\n",
    "\n",
    "    if region_name == \"Hawaii\":\n",
    "        center = (-155.32, 19.39)\n",
    "        horizontal_degree = 2.0\n",
    "        vertical_degree = 2.0\n",
    "        starttime = obspy.UTCDateTime(\"2018-01-01T00\")\n",
    "        endtime = obspy.UTCDateTime(\"2022-08-12T00\")\n",
    "        client = \"IRIS\"\n",
    "        network_list = [\"HV\", \"PT\"]\n",
    "        channel_list = \"HH*,BH*,EH*,HN*\"\n",
    "\n",
    "    if region_name == \"Hawaii2\":\n",
    "        center = (-155.32, 19.39)\n",
    "        horizontal_degree = 2.0\n",
    "        vertical_degree = 2.0\n",
    "        starttime = obspy.UTCDateTime(\"2022-08-01T00\")\n",
    "        endtime = obspy.UTCDateTime(\"2022-08-16T00\")\n",
    "        client = \"IRIS\"\n",
    "        network_list = [\"HV\", \"PT\"]\n",
    "        channel_list = \"HH*,BH*,EH*,HN*\"\n",
    "\n",
    "    if region_name == \"PuertoRico\":\n",
    "        center = (-66.5, 18)\n",
    "        horizontal_degree = 3.0\n",
    "        vertical_degree = 2.0\n",
    "        starttime = obspy.UTCDateTime(\"2018-05-01T00\")\n",
    "        endtime = obspy.UTCDateTime(\"2021-11-01T00\")\n",
    "        client = \"IRIS\"\n",
    "        network_list = [\"*\"]\n",
    "        channel_list = \"HH*,BH*,HN*\"\n",
    "\n",
    "    if region_name == \"SaltonSea\":\n",
    "        center = (-115.53, 32.98)\n",
    "        horizontal_degree = 1.0\n",
    "        vertical_degree = 1.0\n",
    "        starttime = obspy.UTCDateTime(\"2020-10-01T00\")\n",
    "        endtime = obspy.UTCDateTime(\"2020-10-01T02\")\n",
    "        client = \"SCEDC\"\n",
    "        network_list = [\"CI\"]\n",
    "        channel_list = \"HH*,BH*,EH*,HN*\"\n",
    "\n",
    "    if region_name == \"2003SanSimeon\":\n",
    "        center = (-121.101, 35.701)\n",
    "        horizontal_degree = 1.0\n",
    "        vertical_degree = 1.0\n",
    "        starttime = obspy.UTCDateTime(\"2003-12-22T00\")\n",
    "        endtime = obspy.UTCDateTime(\"2003-12-24T00\")\n",
    "        client = \"NCEDC\"\n",
    "        network_list = [\"*\"]\n",
    "        channel_list = \"HH*,BH*,EH*,HN*\"\n",
    "\n",
    "    if region_name == \"Italy\":\n",
    "        center = (13.188, 42.723)\n",
    "        horizontal_degree = 1.0\n",
    "        vertical_degree = 1.0\n",
    "        starttime = obspy.UTCDateTime(\"2016-08-24T00\")\n",
    "        endtime = obspy.UTCDateTime(\"2016-08-26T00\")\n",
    "        client = \"INGV\"\n",
    "        network_list = [\"*\"]\n",
    "        channel_list = \"HH*,BH*,EH*,HN*\"\n",
    "\n",
    "    if region_name == \"SmithValley\":\n",
    "        center = (-119.5, 38.51)\n",
    "        horizontal_degree = 1.0\n",
    "        vertical_degree = 1.0\n",
    "        starttime = obspy.UTCDateTime(\"2021-07-08T00:00\")\n",
    "        endtime = obspy.UTCDateTime(\"2021-07-16T00:00\")\n",
    "        client = \"NCEDC\"\n",
    "        network_list = [\"*\"]\n",
    "        channel_list = \"HH*,BH*,EH*,HN*\"\n",
    "\n",
    "    if region_name == \"Antilles\":\n",
    "        center = (-61.14867, 14.79683)\n",
    "        horizontal_degree = 0.2\n",
    "        vertical_degree = 0.2\n",
    "        starttime = obspy.UTCDateTime(\"2021-04-10T00\")\n",
    "        endtime = obspy.UTCDateTime(\"2021-04-15T00\")\n",
    "        client = \"RESIF\"\n",
    "        network_list = [\"*\"]\n",
    "        channel_list = \"HH*,BH*,EH*,HN*\"\n",
    "\n",
    "    if region_name == \"LongValley\":\n",
    "        # center = (-118.8, 37.6+0.3)\n",
    "        # horizontal_degree = 3.0\n",
    "        # vertical_degree = 3.0\n",
    "        center = (-118.8 - 0.1, 37.6)\n",
    "        horizontal_degree = 1.5\n",
    "        vertical_degree = 1.5\n",
    "        starttime = obspy.UTCDateTime(\"2020-01-01T00\")\n",
    "        endtime = obspy.UTCDateTime(\"2022-08-11T00\")\n",
    "        client = \"NCEDC\"\n",
    "        network_list = [\"*\"]\n",
    "        channel_list = \"HH*,EH*\"\n",
    "\n",
    "    if region_name == \"SierraNegra\":\n",
    "        center = (-91.13, -0.81)\n",
    "        horizontal_degree = 1.5\n",
    "        vertical_degree = 1.5\n",
    "        starttime = obspy.UTCDateTime(\"2009-07-22T00\")\n",
    "        endtime = obspy.UTCDateTime(\"2011-06-20T00\")\n",
    "        client = \"IRIS\"\n",
    "        network_list = [\"*\"]\n",
    "        channel_list = \"BH*,HH*,EH*\"\n",
    "\n",
    "    ####### save config ########\n",
    "    config = {}\n",
    "    config[\"region\"] = region_name\n",
    "    config[\"center\"] = center\n",
    "    config[\"xlim_degree\"] = [\n",
    "        center[0] - horizontal_degree / 2,\n",
    "        center[0] + horizontal_degree / 2,\n",
    "    ]\n",
    "    config[\"ylim_degree\"] = [\n",
    "        center[1] - vertical_degree / 2,\n",
    "        center[1] + vertical_degree / 2,\n",
    "    ]\n",
    "    config[\"min_longitude\"] = center[0] - horizontal_degree / 2\n",
    "    config[\"max_longitude\"] = center[0] + horizontal_degree / 2\n",
    "    config[\"min_latitude\"] = center[1] - vertical_degree / 2\n",
    "    config[\"max_latitude\"] = center[1] + vertical_degree / 2\n",
    "    config[\"degree2km\"] = degree2km\n",
    "    config[\"starttime\"] = starttime.datetime.isoformat(timespec=\"milliseconds\")\n",
    "    config[\"endtime\"] = endtime.datetime.isoformat(timespec=\"milliseconds\")\n",
    "    config[\"networks\"] = network_list\n",
    "    config[\"channels\"] = channel_list\n",
    "    config[\"client\"] = client\n",
    "\n",
    "    ## PhaseNet\n",
    "    config[\"phasenet\"] = {}\n",
    "    ## GaMMA\n",
    "    config[\"gamma\"] = {}\n",
    "    ## HypoDD\n",
    "    config[\"hypodd\"] = {\"MAXEVENT\": 1e4}\n",
    "\n",
    "    with open(config_json, \"w\") as fp:\n",
    "        json.dump(config, fp, indent=2)\n",
    "\n",
    "    print(json.dumps(config, indent=4))\n",
    "\n",
    "    ####### set paraell for cloud ########\n",
    "    ## split data by hours\n",
    "    # one_day = datetime.timedelta(days=1)\n",
    "    one_hour = datetime.timedelta(hours=1)\n",
    "    starttimes = []\n",
    "    tmp_start = starttime\n",
    "    while tmp_start < endtime:\n",
    "        starttimes.append(tmp_start.datetime.isoformat(timespec=\"milliseconds\"))\n",
    "        tmp_start += one_hour\n",
    "    with open(datetime_json, \"w\") as fp:\n",
    "        json.dump(\n",
    "            {\"starttimes\": starttimes, \"interval\": one_hour.total_seconds()},\n",
    "            fp,\n",
    "            indent=2,\n",
    "        )\n",
    "\n",
    "    ## split stattimes into N parallel process\n",
    "    if num_parallel == 0:\n",
    "        num_parallel = min(60, int((len(starttimes) - 1) // 6 + 1))\n",
    "        # num_parallel = min(30, int((len(starttimes)-1)//6+1))\n",
    "        # num_parallel = min(24, len(starttimes))\n",
    "    idx = [x.tolist() for x in np.array_split(np.arange(len(starttimes)), num_parallel)]\n",
    "\n",
    "    with open(index_json, \"w\") as fp:\n",
    "        json.dump(idx, fp, indent=2)\n",
    "\n",
    "    ## upload to s3 bucket\n",
    "    try:\n",
    "        from minio import Minio\n",
    "\n",
    "        minioClient = Minio(s3_url, access_key=\"minio\", secret_key=\"minio123\", secure=secure)\n",
    "        if not minioClient.bucket_exists(bucket_name):\n",
    "            minioClient.make_bucket(bucket_name)\n",
    "\n",
    "        minioClient.fput_object(\n",
    "            bucket_name,\n",
    "            f\"{config['region']}/config.json\",\n",
    "            config_json,\n",
    "        )\n",
    "\n",
    "        minioClient.fput_object(\n",
    "            bucket_name,\n",
    "            f\"{config['region']}/datetime.json\",\n",
    "            datetime_json,\n",
    "        )\n",
    "\n",
    "        minioClient.fput_object(\n",
    "            bucket_name,\n",
    "            f\"{config['region']}/index.json\",\n",
    "            index_json,\n",
    "        )\n",
    "\n",
    "    except Exception as err:\n",
    "        print(f\"ERROR: can not access minio service! \\n{err}\")\n",
    "        pass\n",
    "\n",
    "    return list(range(num_parallel))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "{\n",
      "    \"region\": \"Demo\",\n",
      "    \"center\": [\n",
      "        -117.504,\n",
      "        35.705\n",
      "    ],\n",
      "    \"xlim_degree\": [\n",
      "        -118.004,\n",
      "        -117.004\n",
      "    ],\n",
      "    \"ylim_degree\": [\n",
      "        35.205,\n",
      "        36.205\n",
      "    ],\n",
      "    \"min_longitude\": -118.004,\n",
      "    \"max_longitude\": -117.004,\n",
      "    \"min_latitude\": 35.205,\n",
      "    \"max_latitude\": 36.205,\n",
      "    \"degree2km\": 111.19492664455873,\n",
      "    \"starttime\": \"2019-07-04T17:00:00.000\",\n",
      "    \"endtime\": \"2019-07-04T19:00:00.000\",\n",
      "    \"networks\": [\n",
      "        \"CI\"\n",
      "    ],\n",
      "    \"channels\": \"HH*,BH*,EH*,HN*\",\n",
      "    \"client\": \"SCEDC\",\n",
      "    \"phasenet\": {},\n",
      "    \"gamma\": {},\n",
      "    \"hypodd\": {\n",
      "        \"MAXEVENT\": 10000.0\n",
      "    }\n",
      "}\n",
      "ERROR: can not access minio service! \n",
      "HTTPSConnectionPool(host='minio-service', port=9000): Max retries exceeded with url: /catalogs?location= (Caused by NewConnectionError('<urllib3.connection.HTTPSConnection object at 0x7f3cd25275e0>: Failed to establish a new connection: [Errno -2] Name or service not known'))\n"
     ]
    }
   ],
   "source": [
    "if run_local:\n",
    "    idx = set_config(\n",
    "        region_name,\n",
    "        root_dir(\"index.json\"),\n",
    "        root_dir(\"config.json\"),\n",
    "        root_dir(\"datetimes.json\"),\n",
    "        num_parallel=1,\n",
    "    )"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "config_op = comp.func_to_container_op(\n",
    "    set_config,\n",
    "    base_image=\"python:3.8\",\n",
    "    packages_to_install=[\"numpy\", \"obspy\", \"minio\"],\n",
    ")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 2. Download events of the standard catalog\n",
    "\n",
    "This catalog is not used by QuakeFolow. It is only used for comparing detection results."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "def download_events(\n",
    "    config_json: InputPath(\"json\"), \n",
    "    standard_catalog: OutputPath(str),\n",
    "    bucket_name: str = \"catalogs\",\n",
    "    s3_url: str = \"minio-service:9000\",\n",
    "    secure: bool = True,\n",
    "):\n",
    "\n",
    "    import json\n",
    "    import os\n",
    "    import pickle\n",
    "    from collections import defaultdict\n",
    "\n",
    "    import matplotlib\n",
    "    import matplotlib.pyplot as plt\n",
    "    import obspy\n",
    "    import pandas as pd\n",
    "    from obspy.clients.fdsn import Client\n",
    "\n",
    "    # matplotlib.use(\"agg\")\n",
    "    # %matplotlib inline\n",
    "\n",
    "    with open(config_json, \"r\") as fp:\n",
    "        config = json.load(fp)\n",
    "\n",
    "    ####### IRIS catalog ########\n",
    "    try:\n",
    "        events = Client(config[\"client\"]).get_events(\n",
    "            starttime=config[\"starttime\"],\n",
    "            endtime=config[\"endtime\"],\n",
    "            minlongitude=config[\"xlim_degree\"][0],\n",
    "            maxlongitude=config[\"xlim_degree\"][1],\n",
    "            minlatitude=config[\"ylim_degree\"][0],\n",
    "            maxlatitude=config[\"ylim_degree\"][1],\n",
    "            # filename='events.xml',\n",
    "        )\n",
    "    except:\n",
    "        events = Client(\"iris\").get_events(\n",
    "            starttime=config[\"starttime\"],\n",
    "            endtime=config[\"endtime\"],\n",
    "            minlongitude=config[\"xlim_degree\"][0],\n",
    "            maxlongitude=config[\"xlim_degree\"][1],\n",
    "            minlatitude=config[\"ylim_degree\"][0],\n",
    "            maxlatitude=config[\"ylim_degree\"][1],\n",
    "            # filename='events.xml',\n",
    "        )\n",
    "\n",
    "    #     events = obspy.read_events('events.xml')\n",
    "    print(f\"Number of events: {len(events)}\")\n",
    "    #     events.plot('local', outfile=\"events.png\")\n",
    "    #     events.plot('local')\n",
    "\n",
    "    ####### Save catalog ########\n",
    "    catalog = defaultdict(list)\n",
    "    for event in events:\n",
    "        if len(event.magnitudes) > 0:\n",
    "            catalog[\"time\"].append(event.origins[0].time.datetime)\n",
    "            catalog[\"magnitude\"].append(event.magnitudes[0].mag)\n",
    "            catalog[\"longitude\"].append(event.origins[0].longitude)\n",
    "            catalog[\"latitude\"].append(event.origins[0].latitude)\n",
    "            catalog[\"depth(m)\"].append(event.origins[0].depth)\n",
    "    catalog = pd.DataFrame.from_dict(catalog).sort_values([\"time\"])\n",
    "    catalog.to_csv(\n",
    "        standard_catalog,\n",
    "        # sep=\"\\t\",\n",
    "        index=False,\n",
    "        float_format=\"%.3f\",\n",
    "        date_format=\"%Y-%m-%dT%H:%M:%S.%f\",\n",
    "        columns=[\"time\", \"magnitude\", \"longitude\", \"latitude\", \"depth(m)\"],\n",
    "    )\n",
    "\n",
    "    ## upload to s3 bucket\n",
    "    try:\n",
    "        from minio import Minio\n",
    "\n",
    "        minioClient = Minio(s3_url, access_key=\"minio\", secret_key=\"minio123\", secure=secure)\n",
    "        if not minioClient.bucket_exists(bucket_name):\n",
    "            minioClient.make_bucket(bucket_name)\n",
    "\n",
    "        minioClient.fput_object(\n",
    "            bucket_name,\n",
    "            f\"{config['region']}/standard_catalog.csv\",\n",
    "            standard_catalog,\n",
    "        )\n",
    "\n",
    "    except Exception as err:\n",
    "        print(f\"ERROR: can not access minio service! \\n{err}\")\n",
    "        pass\n",
    "\n",
    "    ####### Plot catalog ########\n",
    "    plt.figure()\n",
    "    plt.plot(catalog[\"longitude\"], catalog[\"latitude\"], \".\", markersize=1)\n",
    "    plt.xlabel(\"Longitude\")\n",
    "    plt.ylabel(\"Latitude\")\n",
    "    plt.axis(\"scaled\")\n",
    "    plt.xlim(config[\"xlim_degree\"])\n",
    "    plt.ylim(config[\"ylim_degree\"])\n",
    "    # plt.savefig(os.path.join(data_path, \"events_loc.png\"))\n",
    "    plt.show()\n",
    "\n",
    "    plt.figure()\n",
    "    plt.plot_date(catalog[\"time\"], catalog[\"magnitude\"], \".\", markersize=1)\n",
    "    plt.gcf().autofmt_xdate()\n",
    "    plt.ylabel(\"Magnitude\")\n",
    "    plt.title(f\"Number of events: {len(events)}\")\n",
    "    # plt.savefig(os.path.join(data_path, \"events_mag_time.png\"))\n",
    "    plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Number of events: 77\n",
      "ERROR: can not access minio service! \n",
      "HTTPSConnectionPool(host='minio-service', port=9000): Max retries exceeded with url: /catalogs?location= (Caused by NewConnectionError('<urllib3.connection.HTTPSConnection object at 0x7f3cf428dd30>: Failed to establish a new connection: [Errno -2] Name or service not known'))\n"
     ]
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "if run_local:\n",
    "    download_events(root_dir(\"config.json\"), root_dir(\"standard_catalog.csv\"))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "download_events_op = comp.func_to_container_op(\n",
    "    download_events,\n",
    "    # base_image='zhuwq0/quakeflow-env:latest',\n",
    "    base_image=\"python:3.8\",\n",
    "    packages_to_install=[\n",
    "        \"obspy\",\n",
    "        \"pandas\",\n",
    "        \"matplotlib\",\n",
    "        \"minio\",\n",
    "    ],\n",
    ")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 3. Download stations"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "def download_stations(\n",
    "    config_json: InputPath(\"json\"),\n",
    "    station_json: OutputPath(\"json\"),\n",
    "    station_pkl: OutputPath(\"pickle\"),\n",
    "    bucket_name: str = \"catalogs\",\n",
    "    s3_url: str = \"minio-service:9000\",\n",
    "    secure: bool = True,\n",
    "):\n",
    "\n",
    "    import json\n",
    "    import os\n",
    "    import pickle\n",
    "    from collections import defaultdict\n",
    "\n",
    "    import matplotlib\n",
    "    import matplotlib.pyplot as plt\n",
    "    import obspy\n",
    "    import pandas as pd\n",
    "    from obspy.clients.fdsn import Client\n",
    "\n",
    "    # matplotlib.use(\"agg\")\n",
    "    # %matplotlib inline\n",
    "\n",
    "    with open(config_json, \"r\") as fp:\n",
    "        config = json.load(fp)\n",
    "\n",
    "    print(\"Network:\", \",\".join(config[\"networks\"]))\n",
    "\n",
    "    ####### Download stations ########\n",
    "    stations = Client(config[\"client\"]).get_stations(\n",
    "        network=\",\".join(config[\"networks\"]),\n",
    "        station=\"*\",\n",
    "        starttime=config[\"starttime\"],\n",
    "        endtime=config[\"endtime\"],\n",
    "        minlongitude=config[\"xlim_degree\"][0],\n",
    "        maxlongitude=config[\"xlim_degree\"][1],\n",
    "        minlatitude=config[\"ylim_degree\"][0],\n",
    "        maxlatitude=config[\"ylim_degree\"][1],\n",
    "        channel=config[\"channels\"],\n",
    "        level=\"response\",\n",
    "        # filename=\"stations.xml\"\n",
    "    )\n",
    "\n",
    "    #     stations = obspy.read_inventory(\"stations.xml\")\n",
    "    print(\"Number of stations: {}\".format(sum([len(x) for x in stations])))\n",
    "    # stations.plot('local', outfile=\"stations.png\")\n",
    "    #     stations.plot('local')\n",
    "\n",
    "    ####### Save stations ########\n",
    "    station_locs = defaultdict(dict)\n",
    "    for network in stations:\n",
    "        for station in network:\n",
    "            for chn in station:\n",
    "                sid = f\"{network.code}.{station.code}.{chn.location_code}.{chn.code[:-1]}\"\n",
    "                if sid in station_locs:\n",
    "                    if chn.code[-1] not in station_locs[sid][\"component\"]:\n",
    "                        station_locs[sid][\"component\"].append(chn.code[-1])\n",
    "                        station_locs[sid][\"response\"].append(round(chn.response.instrument_sensitivity.value, 2))\n",
    "                else:\n",
    "                    tmp_dict = {\n",
    "                        \"longitude\": chn.longitude,\n",
    "                        \"latitude\": chn.latitude,\n",
    "                        \"elevation(m)\": chn.elevation,\n",
    "                        \"component\": [\n",
    "                            chn.code[-1],\n",
    "                        ],\n",
    "                        \"response\": [\n",
    "                            round(chn.response.instrument_sensitivity.value, 2),\n",
    "                        ],\n",
    "                        \"unit\": chn.response.instrument_sensitivity.input_units.lower(),\n",
    "                    }\n",
    "                    station_locs[sid] = tmp_dict\n",
    "\n",
    "    with open(station_json, \"w\") as fp:\n",
    "        json.dump(station_locs, fp, indent=2)\n",
    "\n",
    "    with open(station_pkl, \"wb\") as fp:\n",
    "        pickle.dump(stations, fp)\n",
    "\n",
    "    ## upload to s3 bucket\n",
    "    try:\n",
    "        from minio import Minio\n",
    "\n",
    "        minioClient = Minio(s3_url, access_key=\"minio\", secret_key=\"minio123\", secure=secure)\n",
    "        if not minioClient.bucket_exists(bucket_name):\n",
    "            minioClient.make_bucket(bucket_name)\n",
    "\n",
    "        minioClient.fput_object(\n",
    "            bucket_name,\n",
    "            f\"{config['region']}/stations.json\",\n",
    "            station_json,\n",
    "        )\n",
    "\n",
    "        minioClient.fput_object(\n",
    "            bucket_name,\n",
    "            f\"{config['region']}/stations.pkl\",\n",
    "            station_pkl,\n",
    "        )\n",
    "\n",
    "    except Exception as err:\n",
    "        print(f\"ERROR: can not access minio service! \\n{err}\")\n",
    "        pass\n",
    "    \n",
    "    ######## Plot stations ########\n",
    "    station_locs = pd.DataFrame.from_dict(station_locs, orient=\"index\")\n",
    "    plt.figure()\n",
    "    plt.plot(station_locs[\"longitude\"], station_locs[\"latitude\"], \"^\", label=\"Stations\")\n",
    "    plt.xlabel(\"X (km)\")\n",
    "    plt.ylabel(\"Y (km)\")\n",
    "    plt.axis(\"scaled\")\n",
    "    plt.xlim(config[\"xlim_degree\"])\n",
    "    plt.ylim(config[\"ylim_degree\"])\n",
    "    plt.legend()\n",
    "    plt.title(f\"Number of stations: {len(station_locs)}\")\n",
    "    #     plt.savefig(os.path.join(data_path, \"stations_loc.png\"))\n",
    "    plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Network: CI\n",
      "Number of stations: 17\n",
      "ERROR: can not access minio service! \n",
      "HTTPSConnectionPool(host='minio-service', port=9000): Max retries exceeded with url: /catalogs?location= (Caused by NewConnectionError('<urllib3.connection.HTTPSConnection object at 0x7f3cdab27940>: Failed to establish a new connection: [Errno -2] Name or service not known'))\n"
     ]
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "if run_local:\n",
    "    download_stations(root_dir(\"config.json\"), root_dir(\"stations.json\"), root_dir(\"stations.pkl\"))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "download_stations_op = comp.func_to_container_op(\n",
    "    download_stations,\n",
    "    # base_image='zhuwq0/quakeflow-env:latest',\n",
    "    base_image=\"python:3.8\",\n",
    "    packages_to_install=[\n",
    "        \"obspy\",\n",
    "        \"pandas\",\n",
    "        \"matplotlib\",\n",
    "        \"minio\",\n",
    "    ],\n",
    ")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 4. Download waveform data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "def download_waveform(\n",
    "    node_i: int,\n",
    "    index_json: InputPath(\"json\"),\n",
    "    config_json: InputPath(\"json\"),\n",
    "    datetime_json: InputPath(\"json\"),\n",
    "    station_pkl: InputPath(\"pickle\"),\n",
    "    fname_csv: OutputPath(str),\n",
    "    data_path: str,\n",
    "    bucket_name: str = \"waveforms\",\n",
    "    s3_url: str = \"minio-service:9000\",\n",
    "    secure: bool = True,\n",
    ") -> str:\n",
    "\n",
    "    import json\n",
    "    import os\n",
    "    import pickle\n",
    "    import random\n",
    "    import threading\n",
    "    import time\n",
    "\n",
    "    import obspy\n",
    "    from obspy.clients.fdsn import Client\n",
    "\n",
    "    lock = threading.Lock()\n",
    "\n",
    "    upload_minio = False\n",
    "    # try:\n",
    "    #     from minio import Minio\n",
    "\n",
    "    #     minioClient = Minio(s3_url, access_key='minio', secret_key='minio123', secure=secure)\n",
    "    #     if not minioClient.bucket_exists(bucket_name):\n",
    "    #         minioClient.make_bucket(bucket_name)\n",
    "    #     upload_minio = True\n",
    "    # except Exception as err:\n",
    "    #     # print(f\"ERROR: can not access minio service! \\n{err}\")\n",
    "    #     pass\n",
    "\n",
    "    with open(index_json, \"r\") as fp:\n",
    "        index = json.load(fp)\n",
    "    idx = index[node_i]\n",
    "    with open(config_json, \"r\") as fp:\n",
    "        config = json.load(fp)\n",
    "    with open(datetime_json, \"r\") as fp:\n",
    "        tmp = json.load(fp)\n",
    "        starttimes = tmp[\"starttimes\"]\n",
    "        interval = tmp[\"interval\"]\n",
    "    with open(station_pkl, \"rb\") as fp:\n",
    "        stations = pickle.load(fp)\n",
    "\n",
    "    waveform_dir = os.path.join(data_path, config[\"region\"], \"waveforms\")\n",
    "    if not os.path.exists(waveform_dir):\n",
    "        os.makedirs(waveform_dir)\n",
    "\n",
    "    ####### Download data ########\n",
    "    client = Client(config[\"client\"])\n",
    "    fname_list = [\"fname\"]\n",
    "\n",
    "    def download(i):\n",
    "        #     for i in idx:\n",
    "        starttime = obspy.UTCDateTime(starttimes[i])\n",
    "        endtime = starttime + interval\n",
    "        fname = \"{}.mseed\".format(starttime.datetime.strftime(\"%Y-%m-%dT%H:%M:%S\"))\n",
    "        if not upload_minio:\n",
    "            if os.path.exists(os.path.join(waveform_dir, fname)):\n",
    "                print(f\"{fname} exists\")\n",
    "                fname_list.append(fname)\n",
    "                return\n",
    "        else:\n",
    "            try:\n",
    "                minioClient.fget_object(\n",
    "                    bucket_name,\n",
    "                    os.path.join(config[\"region\"], fname),\n",
    "                    os.path.join(waveform_dir, fname),\n",
    "                )\n",
    "                print(\n",
    "                    f\"{bucket_name}/{os.path.join(config['region'], fname)} download to {os.path.join(waveform_dir, fname)}\"\n",
    "                )\n",
    "                fname_list.append(fname)\n",
    "                return\n",
    "            except Exception as err:\n",
    "                print(err)\n",
    "\n",
    "        max_retry = 10\n",
    "        stream = obspy.Stream()\n",
    "        print(f\"{fname} download starts\")\n",
    "        num_sta = 0\n",
    "        for network in stations:\n",
    "            for station in network:\n",
    "                print(f\"********{network.code}.{station.code}********\")\n",
    "                retry = 0\n",
    "                while retry < max_retry:\n",
    "                    try:\n",
    "                        tmp = client.get_waveforms(\n",
    "                            network.code,\n",
    "                            station.code,\n",
    "                            \"*\",\n",
    "                            config[\"channels\"],\n",
    "                            starttime,\n",
    "                            endtime,\n",
    "                        )\n",
    "                        #  for trace in tmp:\n",
    "                        #      if trace.stats.sampling_rate != 100:\n",
    "                        #          print(trace)\n",
    "                        #          trace = trace.interpolate(100, method=\"linear\")\n",
    "                        #      trace = trace.detrend(\"spline\", order=2, dspline=5*trace.stats.sampling_rate)\n",
    "                        #      stream.append(trace)\n",
    "                        stream += tmp\n",
    "                        num_sta += len(tmp)\n",
    "                        break\n",
    "                    except Exception as err:\n",
    "                        print(\"Error {}.{}: {}\".format(network.code, station.code, err))\n",
    "                        message = \"No data available for request.\"\n",
    "                        if str(err)[: len(message)] == message:\n",
    "                            break\n",
    "                        retry += 1\n",
    "                        time.sleep(5)\n",
    "                        continue\n",
    "                if retry == max_retry:\n",
    "                    print(f\"{fname}: MAX {max_retry} retries reached : {network.code}.{station.code}\")\n",
    "\n",
    "        if len(stream) > 0:\n",
    "            # stream = stream.merge(fill_value=0)\n",
    "            # stream = stream.trim(starttime, endtime, pad=True, fill_value=0)\n",
    "            stream.write(os.path.join(waveform_dir, fname))\n",
    "            print(f\"{fname} download succeeds\")\n",
    "            # if upload_minio:\n",
    "            #     minioClient.fput_object(bucket_name, os.path.join(config['region'], fname), os.path.join(waveform_dir, fname))\n",
    "            #     print(f\"{fname} upload to minio {os.path.join(config['region'], fname)}\")\n",
    "        else:\n",
    "            print(f\"{fname} empty data\")\n",
    "        lock.acquire()\n",
    "        fname_list.append(fname)\n",
    "        lock.release()\n",
    "\n",
    "    threads = []\n",
    "    MAX_THREADS = 2\n",
    "    # MAX_THREADS = 1\n",
    "    for ii, i in enumerate(idx):\n",
    "        t = threading.Thread(target=download, args=(i,))\n",
    "        t.start()\n",
    "        time.sleep(1)\n",
    "        threads.append(t)\n",
    "        if ii % MAX_THREADS == MAX_THREADS - 1:\n",
    "            for t in threads:\n",
    "                t.join()\n",
    "            threads = []\n",
    "    for t in threads:\n",
    "        t.join()\n",
    "\n",
    "    with open(fname_csv, \"w\") as fp:\n",
    "        fp.write(\"\\n\".join(fname_list))\n",
    "\n",
    "    return waveform_dir"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "2019-07-04T17:00:00.mseed exists\n",
      "2019-07-04T18:00:00.mseed exists\n"
     ]
    }
   ],
   "source": [
    "if run_local:\n",
    "    waveform_path = download_waveform(\n",
    "        0,\n",
    "        root_dir(\"index.json\"),\n",
    "        root_dir(\"config.json\"),\n",
    "        root_dir(\"datetimes.json\"),\n",
    "        root_dir(\"stations.pkl\"),\n",
    "        root_dir(\"fname.csv\"),\n",
    "        data_path=root_dir(\"\"),\n",
    "    )"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "download_waveform_op = comp.func_to_container_op(\n",
    "    download_waveform,\n",
    "    # base_image='zhuwq0/quakeflow-env:latest',\n",
    "    base_image=\"python:3.8\",\n",
    "    packages_to_install=[\"obspy\", \"minio\"],\n",
    ")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 5. Run PhaseNet to pick P/S picks"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Requirement already satisfied: numpy==1.22 in /root/miniconda3/envs/quakeflow/lib/python3.8/site-packages (1.22.0)\n",
      "Requirement already satisfied: obspy==1.4.1 in /root/miniconda3/envs/quakeflow/lib/python3.8/site-packages (1.4.1)\n",
      "Requirement already satisfied: pandas==1.2 in /root/miniconda3/envs/quakeflow/lib/python3.8/site-packages (1.2.0)\n",
      "Requirement already satisfied: tensorflow==2.12.1 in /root/miniconda3/envs/quakeflow/lib/python3.8/site-packages (2.12.1)\n",
      "Requirement already satisfied: scipy>=1.7 in /root/miniconda3/envs/quakeflow/lib/python3.8/site-packages (from obspy==1.4.1) (1.10.1)\n",
      "Requirement already satisfied: matplotlib>=3.3 in /root/miniconda3/envs/quakeflow/lib/python3.8/site-packages (from obspy==1.4.1) (3.7.2)\n",
      "Requirement already satisfied: lxml in /root/miniconda3/envs/quakeflow/lib/python3.8/site-packages (from obspy==1.4.1) (5.3.0)\n",
      "Requirement already satisfied: setuptools in /root/miniconda3/envs/quakeflow/lib/python3.8/site-packages (from obspy==1.4.1) (75.1.0)\n",
      "Requirement already satisfied: sqlalchemy<2 in /root/miniconda3/envs/quakeflow/lib/python3.8/site-packages (from obspy==1.4.1) (1.4.54)\n",
      "Requirement already satisfied: decorator in /root/miniconda3/envs/quakeflow/lib/python3.8/site-packages (from obspy==1.4.1) (5.1.1)\n",
      "Requirement already satisfied: requests in /root/miniconda3/envs/quakeflow/lib/python3.8/site-packages (from obspy==1.4.1) (2.32.3)\n",
      "Requirement already satisfied: python-dateutil>=2.7.3 in /root/miniconda3/envs/quakeflow/lib/python3.8/site-packages (from pandas==1.2) (2.9.0.post0)\n",
      "Requirement already satisfied: pytz>=2017.3 in /root/miniconda3/envs/quakeflow/lib/python3.8/site-packages (from pandas==1.2) (2024.1)\n",
      "Requirement already satisfied: absl-py>=1.0.0 in /root/miniconda3/envs/quakeflow/lib/python3.8/site-packages (from tensorflow==2.12.1) (1.4.0)\n",
      "Requirement already satisfied: astunparse>=1.6.0 in /root/miniconda3/envs/quakeflow/lib/python3.8/site-packages (from tensorflow==2.12.1) (1.6.3)\n",
      "Requirement already satisfied: flatbuffers>=2.0 in /root/miniconda3/envs/quakeflow/lib/python3.8/site-packages (from tensorflow==2.12.1) (24.3.25)\n",
      "Requirement already satisfied: gast<=0.4.0,>=0.2.1 in /root/miniconda3/envs/quakeflow/lib/python3.8/site-packages (from tensorflow==2.12.1) (0.4.0)\n",
      "Requirement already satisfied: google-pasta>=0.1.1 in /root/miniconda3/envs/quakeflow/lib/python3.8/site-packages (from tensorflow==2.12.1) (0.2.0)\n",
      "Requirement already satisfied: h5py>=2.9.0 in /root/miniconda3/envs/quakeflow/lib/python3.8/site-packages (from tensorflow==2.12.1) (3.11.0)\n",
      "Requirement already satisfied: jax>=0.3.15 in /root/miniconda3/envs/quakeflow/lib/python3.8/site-packages (from tensorflow==2.12.1) (0.3.25)\n",
      "Requirement already satisfied: opt-einsum>=2.3.2 in /root/miniconda3/envs/quakeflow/lib/python3.8/site-packages (from tensorflow==2.12.1) (3.3.0)\n",
      "Requirement already satisfied: packaging in /root/miniconda3/envs/quakeflow/lib/python3.8/site-packages (from tensorflow==2.12.1) (24.1)\n",
      "Requirement already satisfied: protobuf!=4.21.0,!=4.21.1,!=4.21.2,!=4.21.3,!=4.21.4,!=4.21.5,<5.0.0dev,>=3.20.3 in /root/miniconda3/envs/quakeflow/lib/python3.8/site-packages (from tensorflow==2.12.1) (3.20.3)\n",
      "Requirement already satisfied: six>=1.12.0 in /root/miniconda3/envs/quakeflow/lib/python3.8/site-packages (from tensorflow==2.12.1) (1.16.0)\n",
      "Requirement already satisfied: termcolor>=1.1.0 in /root/miniconda3/envs/quakeflow/lib/python3.8/site-packages (from tensorflow==2.12.1) (2.1.0)\n",
      "Requirement already satisfied: typing-extensions<4.6.0,>=3.6.6 in /root/miniconda3/envs/quakeflow/lib/python3.8/site-packages (from tensorflow==2.12.1) (4.5.0)\n",
      "Requirement already satisfied: wrapt>=1.11.0 in /root/miniconda3/envs/quakeflow/lib/python3.8/site-packages (from tensorflow==2.12.1) (1.14.1)\n",
      "Requirement already satisfied: grpcio<2.0,>=1.24.3 in /root/miniconda3/envs/quakeflow/lib/python3.8/site-packages (from tensorflow==2.12.1) (1.54.3)\n",
      "Requirement already satisfied: tensorboard<2.13,>=2.12 in /root/miniconda3/envs/quakeflow/lib/python3.8/site-packages (from tensorflow==2.12.1) (2.12.1)\n",
      "Requirement already satisfied: tensorflow-estimator<2.13,>=2.12.0 in /root/miniconda3/envs/quakeflow/lib/python3.8/site-packages (from tensorflow==2.12.1) (2.12.0)\n",
      "Requirement already satisfied: keras<2.13,>=2.12.0 in /root/miniconda3/envs/quakeflow/lib/python3.8/site-packages (from tensorflow==2.12.1) (2.12.0)\n",
      "Requirement already satisfied: wheel<1.0,>=0.23.0 in /root/miniconda3/envs/quakeflow/lib/python3.8/site-packages (from astunparse>=1.6.0->tensorflow==2.12.1) (0.44.0)\n",
      "Requirement already satisfied: contourpy>=1.0.1 in /root/miniconda3/envs/quakeflow/lib/python3.8/site-packages (from matplotlib>=3.3->obspy==1.4.1) (1.0.5)\n",
      "Requirement already satisfied: cycler>=0.10 in /root/miniconda3/envs/quakeflow/lib/python3.8/site-packages (from matplotlib>=3.3->obspy==1.4.1) (0.11.0)\n",
      "Requirement already satisfied: fonttools>=4.22.0 in /root/miniconda3/envs/quakeflow/lib/python3.8/site-packages (from matplotlib>=3.3->obspy==1.4.1) (4.51.0)\n",
      "Requirement already satisfied: kiwisolver>=1.0.1 in /root/miniconda3/envs/quakeflow/lib/python3.8/site-packages (from matplotlib>=3.3->obspy==1.4.1) (1.4.4)\n",
      "Requirement already satisfied: pillow>=6.2.0 in /root/miniconda3/envs/quakeflow/lib/python3.8/site-packages (from matplotlib>=3.3->obspy==1.4.1) (10.0.1)\n",
      "Requirement already satisfied: pyparsing<3.1,>=2.3.1 in /root/miniconda3/envs/quakeflow/lib/python3.8/site-packages (from matplotlib>=3.3->obspy==1.4.1) (3.0.9)\n",
      "Requirement already satisfied: importlib-resources>=3.2.0 in /root/miniconda3/envs/quakeflow/lib/python3.8/site-packages (from matplotlib>=3.3->obspy==1.4.1) (6.4.0)\n",
      "Requirement already satisfied: greenlet!=0.4.17 in /root/miniconda3/envs/quakeflow/lib/python3.8/site-packages (from sqlalchemy<2->obspy==1.4.1) (3.1.1)\n",
      "Requirement already satisfied: google-auth<3,>=1.6.3 in /root/miniconda3/envs/quakeflow/lib/python3.8/site-packages (from tensorboard<2.13,>=2.12->tensorflow==2.12.1) (2.29.0)\n",
      "Requirement already satisfied: google-auth-oauthlib<1.1,>=0.5 in /root/miniconda3/envs/quakeflow/lib/python3.8/site-packages (from tensorboard<2.13,>=2.12->tensorflow==2.12.1) (0.5.2)\n",
      "Requirement already satisfied: markdown>=2.6.8 in /root/miniconda3/envs/quakeflow/lib/python3.8/site-packages (from tensorboard<2.13,>=2.12->tensorflow==2.12.1) (3.4.1)\n",
      "Requirement already satisfied: tensorboard-data-server<0.8.0,>=0.7.0 in /root/miniconda3/envs/quakeflow/lib/python3.8/site-packages (from tensorboard<2.13,>=2.12->tensorflow==2.12.1) (0.7.0)\n",
      "Requirement already satisfied: tensorboard-plugin-wit>=1.6.0 in /root/miniconda3/envs/quakeflow/lib/python3.8/site-packages (from tensorboard<2.13,>=2.12->tensorflow==2.12.1) (1.8.1)\n",
      "Requirement already satisfied: werkzeug>=1.0.1 in /root/miniconda3/envs/quakeflow/lib/python3.8/site-packages (from tensorboard<2.13,>=2.12->tensorflow==2.12.1) (3.0.3)\n",
      "Requirement already satisfied: charset-normalizer<4,>=2 in /root/miniconda3/envs/quakeflow/lib/python3.8/site-packages (from requests->obspy==1.4.1) (3.3.2)\n",
      "Requirement already satisfied: idna<4,>=2.5 in /root/miniconda3/envs/quakeflow/lib/python3.8/site-packages (from requests->obspy==1.4.1) (3.7)\n",
      "Requirement already satisfied: urllib3<3,>=1.21.1 in /root/miniconda3/envs/quakeflow/lib/python3.8/site-packages (from requests->obspy==1.4.1) (1.26.20)\n",
      "Requirement already satisfied: certifi>=2017.4.17 in /root/miniconda3/envs/quakeflow/lib/python3.8/site-packages (from requests->obspy==1.4.1) (2024.8.30)\n",
      "Requirement already satisfied: cachetools<6.0,>=2.0.0 in /root/miniconda3/envs/quakeflow/lib/python3.8/site-packages (from google-auth<3,>=1.6.3->tensorboard<2.13,>=2.12->tensorflow==2.12.1) (5.3.3)\n",
      "Requirement already satisfied: pyasn1-modules>=0.2.1 in /root/miniconda3/envs/quakeflow/lib/python3.8/site-packages (from google-auth<3,>=1.6.3->tensorboard<2.13,>=2.12->tensorflow==2.12.1) (0.2.8)\n",
      "Requirement already satisfied: rsa<5,>=3.1.4 in /root/miniconda3/envs/quakeflow/lib/python3.8/site-packages (from google-auth<3,>=1.6.3->tensorboard<2.13,>=2.12->tensorflow==2.12.1) (4.7.2)\n",
      "Requirement already satisfied: requests-oauthlib>=0.7.0 in /root/miniconda3/envs/quakeflow/lib/python3.8/site-packages (from google-auth-oauthlib<1.1,>=0.5->tensorboard<2.13,>=2.12->tensorflow==2.12.1) (2.0.0)\n",
      "Requirement already satisfied: zipp>=3.1.0 in /root/miniconda3/envs/quakeflow/lib/python3.8/site-packages (from importlib-resources>=3.2.0->matplotlib>=3.3->obspy==1.4.1) (3.20.2)\n",
      "Requirement already satisfied: importlib-metadata>=4.4 in /root/miniconda3/envs/quakeflow/lib/python3.8/site-packages (from markdown>=2.6.8->tensorboard<2.13,>=2.12->tensorflow==2.12.1) (7.0.1)\n",
      "Requirement already satisfied: MarkupSafe>=2.1.1 in /root/miniconda3/envs/quakeflow/lib/python3.8/site-packages (from werkzeug>=1.0.1->tensorboard<2.13,>=2.12->tensorflow==2.12.1) (2.1.3)\n",
      "Requirement already satisfied: pyasn1<0.5.0,>=0.4.6 in /root/miniconda3/envs/quakeflow/lib/python3.8/site-packages (from pyasn1-modules>=0.2.1->google-auth<3,>=1.6.3->tensorboard<2.13,>=2.12->tensorflow==2.12.1) (0.4.8)\n",
      "Requirement already satisfied: oauthlib>=3.0.0 in /root/miniconda3/envs/quakeflow/lib/python3.8/site-packages (from requests-oauthlib>=0.7.0->google-auth-oauthlib<1.1,>=0.5->tensorboard<2.13,>=2.12->tensorflow==2.12.1) (3.2.2)\n",
      "\u001b[33mWARNING: Running pip as the 'root' user can result in broken permissions and conflicting behaviour with the system package manager, possibly rendering your system unusable.It is recommended to use a virtual environment instead: https://pip.pypa.io/warnings/venv. Use the --root-user-action option if you know what you are doing and want to suppress this warning.\u001b[0m\u001b[33m\n",
      "\u001b[0m"
     ]
    }
   ],
   "source": [
    "!pip install numpy==1.22 obspy==1.4.1 pandas==1.2 tensorflow==2.12.1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {
    "scrolled": true,
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "python ../PhaseNet/phasenet/predict.py --model=../PhaseNet/model/190703-214543 --data_dir=Demo/Demo/waveforms --data_list=Demo/fname.csv --stations=Demo/stations.json --result_dir=Demo/phasenet --format=mseed_array --amplitude\n",
      "2025-02-07 23:06:02.423599: I tensorflow/core/platform/cpu_feature_guard.cc:182] This TensorFlow binary is optimized to use available CPU instructions in performance-critical operations.\n",
      "To enable the following instructions: SSE4.1 SSE4.2 AVX AVX2 FMA, in other operations, rebuild TensorFlow with the appropriate compiler flags.\n",
      "Total sampel: 3\n",
      "                 longitude   latitude  elevation(m)  component                                 response    unit\n",
      "CI.CCC..BH     -117.364530  35.524950         670.0  [E, N, Z]  [627373000.0, 627373000.0, 627373000.0]     m/s\n",
      "CI.CCC..HH     -117.364530  35.524950         670.0  [E, N, Z]  [627369000.0, 627369000.0, 627369000.0]     m/s\n",
      "CI.CCC..HN     -117.364530  35.524950         670.0  [E, N, Z]           [213980.0, 214322.0, 213809.0]  m/s**2\n",
      "CI.CLC..BH     -117.597510  35.815740         775.0  [E, N, Z]  [627373000.0, 627373000.0, 627373000.0]     m/s\n",
      "CI.CLC..HH     -117.597510  35.815740         775.0  [E, N, Z]  [627369000.0, 627369000.0, 627369000.0]     m/s\n",
      "CI.CLC..HN     -117.597510  35.815740         775.0  [E, N, Z]           [213945.0, 213809.0, 213740.0]  m/s**2\n",
      "CI.DTP..BH     -117.845810  35.267420         908.0  [E, N, Z]  [627373000.0, 627373000.0, 627373000.0]     m/s\n",
      "CI.DTP..HH     -117.845810  35.267420         908.0  [E, N, Z]  [627369000.0, 627369000.0, 627369000.0]     m/s\n",
      "CI.DTP..HN     -117.845810  35.267420         908.0  [E, N, Z]           [214399.0, 213971.0, 214484.0]  m/s**2\n",
      "CI.JRC2..BH    -117.808850  35.982490        1469.0  [E, N, Z]  [784872000.0, 784872000.0, 790484000.0]     m/s\n",
      "CI.JRC2..HH    -117.808850  35.982490        1469.0  [E, N, Z]  [784867000.0, 784867000.0, 790479000.0]     m/s\n",
      "CI.JRC2..HN    -117.808850  35.982490        1469.0  [E, N, Z]           [213809.0, 213945.0, 214185.0]  m/s**2\n",
      "CI.LRL..BH     -117.682120  35.479540        1340.0  [E, N, Z]  [632496000.0, 634185000.0, 631652000.0]     m/s\n",
      "CI.LRL..HH     -117.682120  35.479540        1340.0  [E, N, Z]  [629025000.0, 630705000.0, 628185000.0]     m/s\n",
      "CI.LRL..HN     -117.682120  35.479540        1340.0  [E, N, Z]           [214001.0, 213916.0, 213445.0]  m/s**2\n",
      "CI.LRL.2C.HN   -117.682120  35.479540        1340.0  [E, N, Z]           [213866.0, 213781.0, 213310.0]  m/s**2\n",
      "CI.MPM..BH     -117.489010  36.057990        1839.0  [E, N, Z]  [627373000.0, 627373000.0, 627373000.0]     m/s\n",
      "CI.MPM..HH     -117.489010  36.057990        1839.0  [E, N, Z]  [627369000.0, 627369000.0, 627369000.0]     m/s\n",
      "CI.MPM..HN     -117.489010  36.057990        1839.0  [E, N, Z]           [213911.0, 214219.0, 213911.0]  m/s**2\n",
      "CI.Q0072.01.HN -117.666721  35.609617         695.0  [E, N, Z]           [256354.0, 256354.0, 256354.0]  m/s**2\n",
      "CI.SLA..BH     -117.283320  35.890950        1174.0  [E, N, Z]  [622341000.0, 618995000.0, 616485000.0]     m/s\n",
      "CI.SLA..HH     -117.283320  35.890950        1174.0  [E, N, Z]  [622336000.0, 618991000.0, 616481000.0]     m/s\n",
      "CI.SLA..HN     -117.283320  35.890950        1174.0  [E, N, Z]           [214253.0, 213672.0, 213980.0]  m/s**2\n",
      "CI.SRT..BH     -117.750510  35.692350         667.0  [E, N, Z]  [633341000.0, 633341000.0, 633341000.0]     m/s\n",
      "CI.SRT..HH     -117.750510  35.692350         667.0  [E, N, Z]  [629865000.0, 629865000.0, 629865000.0]     m/s\n",
      "CI.SRT..HN     -117.750510  35.692350         667.0  [E, N, Z]           [214301.0, 213873.0, 214087.0]  m/s**2\n",
      "CI.TOW2..BH    -117.764880  35.808560         685.0  [E, N, Z]  [626915000.0, 626915000.0, 626843000.0]     m/s\n",
      "CI.TOW2..HH    -117.764880  35.808560         685.0  [E, N, Z]  [626911000.0, 626911000.0, 626839000.0]     m/s\n",
      "CI.TOW2..HN    -117.764880  35.808560         685.0  [E, N, Z]           [213800.0, 214142.0, 214356.0]  m/s**2\n",
      "CI.WBM..BH     -117.890490  35.608390         892.0  [E, N, Z]  [316472000.0, 316472000.0, 316472000.0]     m/s\n",
      "CI.WBM..HH     -117.890490  35.608390         892.0  [E, N, Z]  [314768000.0, 314768000.0, 314768000.0]     m/s\n",
      "CI.WBM..HN     -117.890490  35.608390         892.0  [E, N, Z]           [213683.0, 214197.0, 213683.0]  m/s**2\n",
      "CI.WBM.2C.HN   -117.890490  35.608390         892.0  [E, N, Z]           [213520.0, 214033.0, 213520.0]  m/s**2\n",
      "CI.WCS2..BH    -117.765260  36.025210        1143.0  [E, N, Z]  [626915000.0, 626915000.0, 626843000.0]     m/s\n",
      "CI.WCS2..HH    -117.765260  36.025210        1143.0  [E, N, Z]  [626911000.0, 626911000.0, 626839000.0]     m/s\n",
      "CI.WCS2..HN    -117.765260  36.025210        1143.0  [E, N, Z]           [213757.0, 213330.0, 213415.0]  m/s**2\n",
      "CI.WMF..BH     -117.854860  36.117580        1537.4  [E, N, Z]  [629963000.0, 631652000.0, 629963000.0]     m/s\n",
      "CI.WMF..HH     -117.854860  36.117580        1537.4  [E, N, Z]  [626506000.0, 628185000.0, 626506000.0]     m/s\n",
      "CI.WMF..HN     -117.854860  36.117580        1537.4  [E, N, Z]           [214087.0, 214087.0, 214087.0]  m/s**2\n",
      "CI.WMF.2C.HN   -117.854860  36.117580        1537.4  [E, N, Z]           [213952.0, 213952.0, 213952.0]  m/s**2\n",
      "CI.WNM..EH     -117.906160  35.842200         974.3        [Z]                             [69306200.0]     m/s\n",
      "CI.WNM..HN     -117.906160  35.842200         974.3  [E, N, Z]           [214054.0, 213926.0, 214054.0]  m/s**2\n",
      "CI.WNM.2C.HN   -117.906160  35.842200         974.3  [E, N, Z]           [214048.0, 213920.0, 214048.0]  m/s**2\n",
      "CI.WRC2..BH    -117.650380  35.947900         943.0  [E, N, Z]  [633341000.0, 633341000.0, 633341000.0]     m/s\n",
      "CI.WRC2..HH    -117.650380  35.947900         943.0  [E, N, Z]  [629865000.0, 629865000.0, 629865000.0]     m/s\n",
      "CI.WRC2..HN    -117.650380  35.947900         943.0  [E, N, Z]           [214472.0, 214215.0, 214301.0]  m/s**2\n",
      "CI.WRV2..EH    -117.890400  36.007740        1070.0        [Z]                             [71427500.0]     m/s\n",
      "CI.WRV2..HN    -117.890400  36.007740        1070.0  [E, N, Z]           [213883.0, 235224.0, 235139.0]  m/s**2\n",
      "CI.WRV2.2C.HN  -117.890400  36.007740        1070.0  [E, N, Z]           [213877.0, 235218.0, 235132.0]  m/s**2\n",
      "CI.WVP2..EH    -117.817690  35.949390        1465.0        [Z]                             [68019200.0]     m/s\n",
      "CI.WVP2..HN    -117.817690  35.949390        1465.0  [E, N, Z]           [213797.0, 213584.0, 213755.0]  m/s**2\n",
      "CI.WVP2.2C.HN  -117.817690  35.949390        1465.0  [E, N, Z]           [213791.0, 213578.0, 213749.0]  m/s**2\n",
      "[Errno 2] No such file or directory: 'Demo/Demo/waveforms/fname'\n",
      "2025-02-07 23:06:24.127677: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'create_inputs/is_training' with dtype bool\n",
      "\t [[{{node create_inputs/is_training}}]]\n",
      "2025-02-07 23:06:24.282891: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'create_inputs/is_training' with dtype bool\n",
      "\t [[{{node create_inputs/is_training}}]]\n",
      "2025-02-07 23:06:24.329252: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'create_inputs/is_training' with dtype bool\n",
      "\t [[{{node create_inputs/is_training}}]]\n",
      "2025-02-07 23:06:24.552581: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'create_inputs/is_training' with dtype bool\n",
      "\t [[{{node create_inputs/is_training}}]]\n",
      "2025-02-07 23:06:24.647272: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'create_inputs/is_training' with dtype bool\n",
      "\t [[{{node create_inputs/is_training}}]]\n",
      "2025-02-07 23:06:24.696817: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'create_inputs/is_training' with dtype bool\n",
      "\t [[{{node create_inputs/is_training}}]]\n",
      "2025-02-07 23:06:24.838956: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'create_inputs/is_training' with dtype bool\n",
      "\t [[{{node create_inputs/is_training}}]]\n",
      "2025-02-07 23:06:24.904313: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'create_inputs/is_training' with dtype bool\n",
      "\t [[{{node create_inputs/is_training}}]]\n",
      "2025-02-07 23:06:24.948164: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'create_inputs/is_training' with dtype bool\n",
      "\t [[{{node create_inputs/is_training}}]]\n",
      "2025-02-07 23:06:25.094281: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'create_inputs/is_training' with dtype bool\n",
      "\t [[{{node create_inputs/is_training}}]]\n",
      "2025-02-07 23:06:25.185771: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'create_inputs/is_training' with dtype bool\n",
      "\t [[{{node create_inputs/is_training}}]]\n",
      "2025-02-07 23:06:25.278416: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'create_inputs/is_training' with dtype bool\n",
      "\t [[{{node create_inputs/is_training}}]]\n",
      "2025-02-07 23:06:25.477605: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'create_inputs/is_training' with dtype bool\n",
      "\t [[{{node create_inputs/is_training}}]]\n",
      "2025-02-07 23:06:25.576594: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'create_inputs/is_training' with dtype bool\n",
      "\t [[{{node create_inputs/is_training}}]]\n",
      "2025-02-07 23:06:25.663839: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'create_inputs/is_training' with dtype bool\n",
      "\t [[{{node create_inputs/is_training}}]]\n",
      "2025-02-07 23:06:25.854474: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'create_inputs/is_training' with dtype bool\n",
      "\t [[{{node create_inputs/is_training}}]]\n",
      "2025-02-07 23:06:25.915108: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'create_inputs/is_training' with dtype bool\n",
      "\t [[{{node create_inputs/is_training}}]]\n",
      "2025-02-07 23:06:25.961573: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'create_inputs/is_training' with dtype bool\n",
      "\t [[{{node create_inputs/is_training}}]]\n",
      "2025-02-07 23:06:26.112823: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'create_inputs/is_training' with dtype bool\n",
      "\t [[{{node create_inputs/is_training}}]]\n",
      "2025-02-07 23:06:26.253819: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'create_inputs/is_training' with dtype bool\n",
      "\t [[{{node create_inputs/is_training}}]]\n",
      "2025-02-07 23:06:26.337867: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'create_inputs/is_training' with dtype bool\n",
      "\t [[{{node create_inputs/is_training}}]]\n",
      "2025-02-07 23:06:26.622228: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'create_inputs/is_training' with dtype bool\n",
      "\t [[{{node create_inputs/is_training}}]]\n",
      "2025-02-07 23:06:26.723326: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'create_inputs/is_training' with dtype bool\n",
      "\t [[{{node create_inputs/is_training}}]]\n",
      "2025-02-07 23:06:26.775886: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'create_inputs/is_training' with dtype bool\n",
      "\t [[{{node create_inputs/is_training}}]]\n",
      "2025-02-07 23:06:26.923238: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'create_inputs/is_training' with dtype bool\n",
      "\t [[{{node create_inputs/is_training}}]]\n",
      "2025-02-07 23:06:27.012595: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'create_inputs/is_training' with dtype bool\n",
      "\t [[{{node create_inputs/is_training}}]]\n",
      "2025-02-07 23:06:27.101130: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'create_inputs/is_training' with dtype bool\n",
      "\t [[{{node create_inputs/is_training}}]]\n",
      "2025-02-07 23:06:27.353197: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'create_inputs/is_training' with dtype bool\n",
      "\t [[{{node create_inputs/is_training}}]]\n",
      "2025-02-07 23:06:27.488662: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'create_inputs/is_training' with dtype bool\n",
      "\t [[{{node create_inputs/is_training}}]]\n",
      "2025-02-07 23:06:27.540287: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'create_inputs/is_training' with dtype bool\n",
      "\t [[{{node create_inputs/is_training}}]]\n",
      "2025-02-07 23:06:27.742094: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'create_inputs/is_training' with dtype bool\n",
      "\t [[{{node create_inputs/is_training}}]]\n",
      "2025-02-07 23:06:27.865453: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'create_inputs/is_training' with dtype bool\n",
      "\t [[{{node create_inputs/is_training}}]]\n",
      "2025-02-07 23:06:27.886418: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'create_inputs/is_training' with dtype bool\n",
      "\t [[{{node create_inputs/is_training}}]]\n",
      "2025-02-07 23:06:28.109016: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'create_inputs/is_training' with dtype bool\n",
      "\t [[{{node create_inputs/is_training}}]]\n",
      "2025-02-07 23:06:28.204520: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'create_inputs/is_training' with dtype bool\n",
      "\t [[{{node create_inputs/is_training}}]]\n",
      "2025-02-07 23:06:28.260908: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'create_inputs/is_training' with dtype bool\n",
      "\t [[{{node create_inputs/is_training}}]]\n",
      "2025-02-07 23:06:28.455947: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'create_inputs/is_training' with dtype bool\n",
      "\t [[{{node create_inputs/is_training}}]]\n",
      "2025-02-07 23:06:28.549972: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'create_inputs/is_training' with dtype bool\n",
      "\t [[{{node create_inputs/is_training}}]]\n",
      "2025-02-07 23:06:28.595116: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'create_inputs/is_training' with dtype bool\n",
      "\t [[{{node create_inputs/is_training}}]]\n",
      "2025-02-07 23:06:28.841236: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'create_inputs/is_training' with dtype bool\n",
      "\t [[{{node create_inputs/is_training}}]]\n",
      "2025-02-07 23:06:28.974164: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'create_inputs/is_training' with dtype bool\n",
      "\t [[{{node create_inputs/is_training}}]]\n",
      "2025-02-07 23:06:29.019391: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'create_inputs/is_training' with dtype bool\n",
      "\t [[{{node create_inputs/is_training}}]]\n",
      "2025-02-07 23:06:29.171174: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'create_inputs/is_training' with dtype bool\n",
      "\t [[{{node create_inputs/is_training}}]]\n",
      "2025-02-07 23:06:29.229987: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'create_inputs/is_training' with dtype bool\n",
      "\t [[{{node create_inputs/is_training}}]]\n",
      "2025-02-07 23:06:29.275364: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'create_inputs/is_training' with dtype bool\n",
      "\t [[{{node create_inputs/is_training}}]]\n",
      "2025-02-07 23:06:29.558307: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'create_inputs/is_training' with dtype bool\n",
      "\t [[{{node create_inputs/is_training}}]]\n",
      "2025-02-07 23:06:29.707947: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'create_inputs/is_training' with dtype bool\n",
      "\t [[{{node create_inputs/is_training}}]]\n",
      "2025-02-07 23:06:29.758008: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'create_inputs/is_training' with dtype bool\n",
      "\t [[{{node create_inputs/is_training}}]]\n",
      "2025-02-07 23:06:30.267086: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'create_inputs/is_training' with dtype bool\n",
      "\t [[{{node create_inputs/is_training}}]]\n",
      "2025-02-07 23:06:30.414161: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'create_inputs/is_training' with dtype bool\n",
      "\t [[{{node create_inputs/is_training}}]]\n",
      "2025-02-07 23:06:30.475228: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'create_inputs/is_training' with dtype bool\n",
      "\t [[{{node create_inputs/is_training}}]]\n",
      "2025-02-07 23:06:30.754388: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'create_inputs/is_training' with dtype bool\n",
      "\t [[{{node create_inputs/is_training}}]]\n",
      "2025-02-07 23:06:30.813840: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'create_inputs/is_training' with dtype bool\n",
      "\t [[{{node create_inputs/is_training}}]]\n",
      "2025-02-07 23:06:30.856813: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'create_inputs/is_training' with dtype bool\n",
      "\t [[{{node create_inputs/is_training}}]]\n",
      "2025-02-07 23:06:31.367602: I tensorflow/compiler/mlir/mlir_graph_optimization_pass.cc:353] MLIR V1 optimization pass is not enabled\n",
      "Pred:   0%|                                               | 0/3 [00:00<?, ?it/s][Errno 2] No such file or directory: 'Demo/Demo/waveforms/fname'\n",
      "Pred:  33%|█████████████                          | 1/3 [00:03<00:06,  3.22s/it]\u001b[31mResampling CI.CCC..BHE from 40.0 to 100 Hz\u001b[0m\n",
      "\u001b[31mResampling CI.CCC..BHN from 40.0 to 100 Hz\u001b[0m\n",
      "\u001b[31mResampling CI.CCC..BHZ from 40.0 to 100 Hz\u001b[0m\n",
      "\u001b[31mResampling CI.CLC..BHE from 40.0 to 100 Hz\u001b[0m\n",
      "\u001b[31mResampling CI.CLC..BHN from 40.0 to 100 Hz\u001b[0m\n",
      "\u001b[31mResampling CI.CLC..BHZ from 40.0 to 100 Hz\u001b[0m\n",
      "\u001b[31mResampling CI.DTP..BHE from 40.0 to 100 Hz\u001b[0m\n",
      "\u001b[31mResampling CI.DTP..BHN from 40.0 to 100 Hz\u001b[0m\n",
      "\u001b[31mResampling CI.DTP..BHZ from 40.0 to 100 Hz\u001b[0m\n",
      "\u001b[31mResampling CI.JRC2..BHE from 40.0 to 100 Hz\u001b[0m\n",
      "\u001b[31mResampling CI.JRC2..BHN from 40.0 to 100 Hz\u001b[0m\n",
      "\u001b[31mResampling CI.JRC2..BHZ from 40.0 to 100 Hz\u001b[0m\n",
      "\u001b[31mResampling CI.LRL..BHE from 40.0 to 100 Hz\u001b[0m\n",
      "\u001b[31mResampling CI.LRL..BHN from 40.0 to 100 Hz\u001b[0m\n",
      "\u001b[31mResampling CI.LRL..BHZ from 40.0 to 100 Hz\u001b[0m\n",
      "\u001b[31mResampling CI.MPM..BHE from 40.0 to 100 Hz\u001b[0m\n",
      "\u001b[31mResampling CI.MPM..BHN from 40.0 to 100 Hz\u001b[0m\n",
      "\u001b[31mResampling CI.MPM..BHZ from 40.0 to 100 Hz\u001b[0m\n",
      "\u001b[31mResampling CI.SLA..BHE from 40.0 to 100 Hz\u001b[0m\n",
      "\u001b[31mResampling CI.SLA..BHN from 40.0 to 100 Hz\u001b[0m\n",
      "\u001b[31mResampling CI.SLA..BHZ from 40.0 to 100 Hz\u001b[0m\n",
      "\u001b[31mResampling CI.SRT..BHE from 40.0 to 100 Hz\u001b[0m\n",
      "\u001b[31mResampling CI.SRT..BHN from 40.0 to 100 Hz\u001b[0m\n",
      "\u001b[31mResampling CI.SRT..BHZ from 40.0 to 100 Hz\u001b[0m\n",
      "\u001b[31mResampling CI.TOW2..BHE from 40.0 to 100 Hz\u001b[0m\n",
      "\u001b[31mResampling CI.TOW2..BHN from 40.0 to 100 Hz\u001b[0m\n",
      "\u001b[31mResampling CI.TOW2..BHZ from 40.0 to 100 Hz\u001b[0m\n",
      "\u001b[31mResampling CI.WBM..BHE from 40.0 to 100 Hz\u001b[0m\n",
      "\u001b[31mResampling CI.WBM..BHN from 40.0 to 100 Hz\u001b[0m\n",
      "\u001b[31mResampling CI.WBM..BHZ from 40.0 to 100 Hz\u001b[0m\n",
      "\u001b[31mResampling CI.WCS2..BHE from 40.0 to 100 Hz\u001b[0m\n",
      "\u001b[31mResampling CI.WCS2..BHN from 40.0 to 100 Hz\u001b[0m\n",
      "\u001b[31mResampling CI.WCS2..BHZ from 40.0 to 100 Hz\u001b[0m\n",
      "\u001b[31mResampling CI.WMF..BHE from 40.0 to 100 Hz\u001b[0m\n",
      "\u001b[31mResampling CI.WMF..BHN from 40.0 to 100 Hz\u001b[0m\n",
      "\u001b[31mResampling CI.WMF..BHZ from 40.0 to 100 Hz\u001b[0m\n",
      "\u001b[31mResampling CI.WRC2..BHE from 40.0 to 100 Hz\u001b[0m\n",
      "\u001b[31mResampling CI.WRC2..BHN from 40.0 to 100 Hz\u001b[0m\n",
      "\u001b[31mResampling CI.WRC2..BHZ from 40.0 to 100 Hz\u001b[0m\n",
      "Empty trace: CI.LRL.2C.HNE 2019-07-04T16:59:59.994500Z\n",
      "Empty trace: CI.LRL.2C.HNN 2019-07-04T16:59:59.994500Z\n",
      "Empty trace: CI.LRL.2C.HNZ 2019-07-04T16:59:59.994500Z\n",
      "Empty trace: CI.Q0072.01.HNE 2019-07-04T16:59:59.994500Z\n",
      "Empty trace: CI.Q0072.01.HNN 2019-07-04T16:59:59.994500Z\n",
      "Empty trace: CI.Q0072.01.HNZ 2019-07-04T16:59:59.994500Z\n",
      "Empty trace: CI.WBM.2C.HNE 2019-07-04T16:59:59.994500Z\n",
      "Empty trace: CI.WBM.2C.HNN 2019-07-04T16:59:59.994500Z\n",
      "Empty trace: CI.WBM.2C.HNZ 2019-07-04T16:59:59.994500Z\n",
      "Empty trace: CI.WMF.2C.HNE 2019-07-04T16:59:59.994500Z\n",
      "Empty trace: CI.WMF.2C.HNN 2019-07-04T16:59:59.994500Z\n",
      "Empty trace: CI.WMF.2C.HNZ 2019-07-04T16:59:59.994500Z\n",
      "Empty trace: CI.WNM.2C.HNE 2019-07-04T16:59:59.994500Z\n",
      "Empty trace: CI.WNM.2C.HNN 2019-07-04T16:59:59.994500Z\n",
      "Empty trace: CI.WNM.2C.HNZ 2019-07-04T16:59:59.994500Z\n",
      "Empty trace: CI.WRV2.2C.HNE 2019-07-04T16:59:59.994500Z\n",
      "Empty trace: CI.WRV2.2C.HNN 2019-07-04T16:59:59.994500Z\n",
      "Empty trace: CI.WRV2.2C.HNZ 2019-07-04T16:59:59.994500Z\n",
      "Empty trace: CI.WVP2.2C.HNE 2019-07-04T16:59:59.994500Z\n",
      "Empty trace: CI.WVP2.2C.HNN 2019-07-04T16:59:59.994500Z\n",
      "Empty trace: CI.WVP2.2C.HNZ 2019-07-04T16:59:59.994500Z\n",
      "2025-02-07 23:07:36.659559: W tensorflow/tsl/framework/cpu_allocator_impl.cc:83] Allocation of 518400000 exceeds 10% of free system memory.\n",
      "\u001b[31mResampling CI.CCC..BHE from 40.0 to 100 Hz\u001b[0m\n",
      "\u001b[31mResampling CI.CCC..BHN from 40.0 to 100 Hz\u001b[0m\n",
      "\u001b[31mResampling CI.CCC..BHZ from 40.0 to 100 Hz\u001b[0m\n",
      "\u001b[31mResampling CI.CLC..BHE from 40.0 to 100 Hz\u001b[0m\n",
      "\u001b[31mResampling CI.CLC..BHN from 40.0 to 100 Hz\u001b[0m\n",
      "\u001b[31mResampling CI.CLC..BHZ from 40.0 to 100 Hz\u001b[0m\n",
      "\u001b[31mResampling CI.DTP..BHE from 40.0 to 100 Hz\u001b[0m\n",
      "2025-02-07 23:07:42.752253: W tensorflow/tsl/framework/cpu_allocator_impl.cc:83] Allocation of 518400000 exceeds 10% of free system memory.\n",
      "\u001b[31mResampling CI.DTP..BHN from 40.0 to 100 Hz\u001b[0m\n",
      "\u001b[31mResampling CI.DTP..BHZ from 40.0 to 100 Hz\u001b[0m\n",
      "\u001b[31mResampling CI.JRC2..BHE from 40.0 to 100 Hz\u001b[0m\n",
      "\u001b[31mResampling CI.JRC2..BHN from 40.0 to 100 Hz\u001b[0m\n",
      "\u001b[31mResampling CI.JRC2..BHZ from 40.0 to 100 Hz\u001b[0m\n",
      "\u001b[31mResampling CI.LRL..BHE from 40.0 to 100 Hz\u001b[0m\n",
      "\u001b[31mResampling CI.LRL..BHN from 40.0 to 100 Hz\u001b[0m\n",
      "\u001b[31mResampling CI.LRL..BHZ from 40.0 to 100 Hz\u001b[0m\n",
      "\u001b[31mResampling CI.MPM..BHE from 40.0 to 100 Hz\u001b[0m\n",
      "\u001b[31mResampling CI.MPM..BHN from 40.0 to 100 Hz\u001b[0m\n",
      "\u001b[31mResampling CI.MPM..BHZ from 40.0 to 100 Hz\u001b[0m\n",
      "\u001b[31mResampling CI.SLA..BHE from 40.0 to 100 Hz\u001b[0m\n",
      "\u001b[31mResampling CI.SLA..BHN from 40.0 to 100 Hz\u001b[0m\n",
      "\u001b[31mResampling CI.SLA..BHZ from 40.0 to 100 Hz\u001b[0m\n",
      "\u001b[31mResampling CI.SRT..BHE from 40.0 to 100 Hz\u001b[0m\n",
      "\u001b[31mResampling CI.SRT..BHN from 40.0 to 100 Hz\u001b[0m\n",
      "\u001b[31mResampling CI.SRT..BHZ from 40.0 to 100 Hz\u001b[0m\n",
      "\u001b[31mResampling CI.TOW2..BHE from 40.0 to 100 Hz\u001b[0m\n",
      "\u001b[31mResampling CI.TOW2..BHN from 40.0 to 100 Hz\u001b[0m\n",
      "\u001b[31mResampling CI.TOW2..BHZ from 40.0 to 100 Hz\u001b[0m\n",
      "2025-02-07 23:07:44.582645: W tensorflow/tsl/framework/cpu_allocator_impl.cc:83] Allocation of 518400000 exceeds 10% of free system memory.\n",
      "\u001b[31mResampling CI.WBM..BHE from 40.0 to 100 Hz\u001b[0m\n",
      "\u001b[31mResampling CI.WBM..BHN from 40.0 to 100 Hz\u001b[0m\n",
      "\u001b[31mResampling CI.WBM..BHZ from 40.0 to 100 Hz\u001b[0m\n",
      "\u001b[31mResampling CI.WCS2..BHE from 40.0 to 100 Hz\u001b[0m\n",
      "\u001b[31mResampling CI.WCS2..BHN from 40.0 to 100 Hz\u001b[0m\n",
      "\u001b[31mResampling CI.WCS2..BHZ from 40.0 to 100 Hz\u001b[0m\n",
      "\u001b[31mResampling CI.WMF..BHE from 40.0 to 100 Hz\u001b[0m\n",
      "\u001b[31mResampling CI.WMF..BHN from 40.0 to 100 Hz\u001b[0m\n",
      "\u001b[31mResampling CI.WMF..BHZ from 40.0 to 100 Hz\u001b[0m\n",
      "\u001b[31mResampling CI.WRC2..BHE from 40.0 to 100 Hz\u001b[0m\n",
      "\u001b[31mResampling CI.WRC2..BHN from 40.0 to 100 Hz\u001b[0m\n",
      "\u001b[31mResampling CI.WRC2..BHZ from 40.0 to 100 Hz\u001b[0m\n",
      "2025-02-07 23:07:48.998632: W tensorflow/tsl/framework/cpu_allocator_impl.cc:83] Allocation of 518400000 exceeds 10% of free system memory.\n",
      "2025-02-07 23:08:06.425845: W tensorflow/tsl/framework/cpu_allocator_impl.cc:83] Allocation of 518400000 exceeds 10% of free system memory.\n",
      "Pred:  67%|██████████████████████████             | 2/3 [02:05<01:13, 73.11s/it]Empty trace: CI.LRL.2C.HNE 2019-07-04T17:59:59.994500Z\n",
      "Empty trace: CI.LRL.2C.HNN 2019-07-04T17:59:59.994500Z\n",
      "Empty trace: CI.LRL.2C.HNZ 2019-07-04T17:59:59.994500Z\n",
      "Empty trace: CI.Q0072.01.HNE 2019-07-04T17:59:59.994500Z\n",
      "Empty trace: CI.Q0072.01.HNN 2019-07-04T17:59:59.994500Z\n",
      "Empty trace: CI.Q0072.01.HNZ 2019-07-04T17:59:59.994500Z\n",
      "Empty trace: CI.WBM.2C.HNE 2019-07-04T17:59:59.994500Z\n",
      "Empty trace: CI.WBM.2C.HNN 2019-07-04T17:59:59.994500Z\n",
      "Empty trace: CI.WBM.2C.HNZ 2019-07-04T17:59:59.994500Z\n",
      "Empty trace: CI.WMF.2C.HNE 2019-07-04T17:59:59.994500Z\n",
      "Empty trace: CI.WMF.2C.HNN 2019-07-04T17:59:59.994500Z\n",
      "Empty trace: CI.WMF.2C.HNZ 2019-07-04T17:59:59.994500Z\n",
      "Empty trace: CI.WNM.2C.HNE 2019-07-04T17:59:59.994500Z\n",
      "Empty trace: CI.WNM.2C.HNN 2019-07-04T17:59:59.994500Z\n",
      "Empty trace: CI.WNM.2C.HNZ 2019-07-04T17:59:59.994500Z\n",
      "Empty trace: CI.WRV2.2C.HNE 2019-07-04T17:59:59.994500Z\n",
      "Empty trace: CI.WRV2.2C.HNN 2019-07-04T17:59:59.994500Z\n",
      "Empty trace: CI.WRV2.2C.HNZ 2019-07-04T17:59:59.994500Z\n",
      "Empty trace: CI.WVP2.2C.HNE 2019-07-04T17:59:59.994500Z\n",
      "Empty trace: CI.WVP2.2C.HNN 2019-07-04T17:59:59.994500Z\n",
      "Empty trace: CI.WVP2.2C.HNZ 2019-07-04T17:59:59.994500Z\n",
      "Pred: 100%|███████████████████████████████████████| 3/3 [03:30<00:00, 70.16s/it]\n",
      "Done with 9128 P-picks and 9574 S-picks\n"
     ]
    }
   ],
   "source": [
    "# %%capture\n",
    "if run_local:\n",
    "    command = f\"python ../PhaseNet/phasenet/predict.py --model=../PhaseNet/model/190703-214543 --data_dir={root_dir(root_dir('waveforms'))} --data_list={root_dir('fname.csv')} --stations={root_dir('stations.json')} --result_dir={root_dir('phasenet')} --format=mseed_array --amplitude\"# --upload_waveform\"\n",
    "    print(command)\n",
    "    !{command}"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "def phasenet_op(data_path: str, data_list: str, stations: str):\n",
    "\n",
    "    return dsl.ContainerOp(\n",
    "        name=\"PhaseNet Picking\",\n",
    "        image=\"zhuwq0/phasenet-api:1.0\",\n",
    "        command=[\"python\"],\n",
    "        arguments=[\n",
    "            \"phasenet/predict.py\",\n",
    "            \"--model\",\n",
    "            \"model/190703-214543\",\n",
    "            \"--data_dir\",\n",
    "            data_path,\n",
    "            \"--data_list\",\n",
    "            dsl.InputArgumentPath(data_list),\n",
    "            \"--stations\",\n",
    "            dsl.InputArgumentPath(stations),\n",
    "            # '--result_dir', \"results\",\n",
    "            \"--format\",\n",
    "            \"mseed_array\",\n",
    "            \"--amplitude\",\n",
    "        ],\n",
    "        file_outputs={\"picks\": \"/opt/results/picks.csv\"},\n",
    "    )"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 6. Run GaMMA to associate P/S picks"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "def gamma(\n",
    "    node_i: int,\n",
    "    index_json: InputPath(\"json\"),\n",
    "    config_json: InputPath(\"json\"),\n",
    "    pick_csv: InputPath(\"csv\"),\n",
    "    station_json: InputPath(\"json\"),\n",
    "    gamma_catalog_csv: OutputPath(str),\n",
    "    gamma_pick_csv: OutputPath(str),\n",
    "    bucket_name: str = \"catalogs\",\n",
    "    s3_url: str = \"minio-service:9000\",\n",
    "    secure: bool = True,\n",
    ") -> str:\n",
    "\n",
    "    import json\n",
    "    import os\n",
    "    import pickle\n",
    "    from datetime import datetime, timedelta\n",
    "\n",
    "    import numpy as np\n",
    "    import pandas as pd\n",
    "    from gamma.utils import association, convert_picks_csv, from_seconds\n",
    "    from pyproj import Proj\n",
    "    from tqdm import tqdm\n",
    "\n",
    "    catalog_dir = os.path.join(\"/tmp/\", bucket_name)\n",
    "    if not os.path.exists(catalog_dir):\n",
    "        os.makedirs(catalog_dir)\n",
    "\n",
    "    ## read config\n",
    "    with open(index_json, \"r\") as fp:\n",
    "        index = json.load(fp)\n",
    "    idx = index[node_i]\n",
    "\n",
    "    with open(config_json, \"r\") as fp:\n",
    "        config = json.load(fp)\n",
    "\n",
    "    ## read picks\n",
    "    # picks = pd.read_json(pick_json)\n",
    "    picks = pd.read_csv(pick_csv, parse_dates=[\"phase_time\"])\n",
    "    picks[\"id\"] = picks[\"station_id\"]\n",
    "    picks[\"timestamp\"] = picks[\"phase_time\"]\n",
    "    picks[\"amp\"] = picks[\"phase_amp\"]\n",
    "    picks[\"type\"] = picks[\"phase_type\"]\n",
    "    picks[\"prob\"] = picks[\"phase_score\"]\n",
    "\n",
    "    ## read stations\n",
    "    # stations = pd.read_csv(station_csv, delimiter=\"\\t\")\n",
    "    with open(station_json, \"r\") as fp:\n",
    "        stations = json.load(fp)\n",
    "    stations = pd.DataFrame.from_dict(stations, orient=\"index\")\n",
    "    # stations = stations.rename(columns={\"station\": \"id\"})\n",
    "    stations[\"id\"] = stations.index\n",
    "    proj = Proj(f\"+proj=sterea +lon_0={config['center'][0]} +lat_0={config['center'][1]} +units=km\")\n",
    "    stations[[\"x(km)\", \"y(km)\"]] = stations.apply(\n",
    "        lambda x: pd.Series(proj(longitude=x.longitude, latitude=x.latitude)), axis=1\n",
    "    )\n",
    "    stations[\"z(km)\"] = stations[\"elevation(m)\"].apply(lambda x: -x / 1e3)\n",
    "\n",
    "    ## setting GMMA configs\n",
    "    config[\"use_dbscan\"] = True\n",
    "    config[\"use_amplitude\"] = True\n",
    "    config[\"method\"] = \"BGMM\"\n",
    "    if config[\"method\"] == \"BGMM\":  ## BayesianGaussianMixture\n",
    "        config[\"oversample_factor\"] = 4\n",
    "    if config[\"method\"] == \"GMM\":  ## GaussianMixture\n",
    "        config[\"oversample_factor\"] = 1\n",
    "\n",
    "    # Earthquake location\n",
    "    config[\"dims\"] = [\"x(km)\", \"y(km)\", \"z(km)\"]\n",
    "    config[\"vel\"] = {\"p\": 6.0, \"s\": 6.0 / 1.73}\n",
    "    config[\"x(km)\"] = (np.array(config[\"xlim_degree\"]) - np.array(config[\"center\"][0])) * config[\"degree2km\"]\n",
    "    config[\"y(km)\"] = (np.array(config[\"ylim_degree\"]) - np.array(config[\"center\"][1])) * config[\"degree2km\"]\n",
    "    config[\"z(km)\"] = (0, 60)\n",
    "    config[\"bfgs_bounds\"] = (\n",
    "        (config[\"x(km)\"][0] - 1, config[\"x(km)\"][1] + 1),  # x\n",
    "        (config[\"y(km)\"][0] - 1, config[\"y(km)\"][1] + 1),  # y\n",
    "        (0, config[\"z(km)\"][1] + 1),  # z\n",
    "        (None, None),  # t\n",
    "    )\n",
    "\n",
    "    # DBSCAN\n",
    "    config[\"dbscan_eps\"] = 10  # second\n",
    "    config[\"dbscan_min_samples\"] = 3  ## see DBSCAN\n",
    "\n",
    "    # Filtering\n",
    "    config[\"min_picks_per_eq\"] = min(10, len(stations) // 2)\n",
    "    config[\"min_p_picks_per_eq\"] = 0\n",
    "    config[\"min_s_picks_per_eq\"] = 0\n",
    "    config[\"max_sigma11\"] = 2.0  # s\n",
    "    config[\"max_sigma22\"] = 2.0  # m/s\n",
    "    config[\"max_sigma12\"] = 1.0  # covariance\n",
    "\n",
    "    # if use amplitude\n",
    "    if config[\"use_amplitude\"]:\n",
    "        picks = picks[picks[\"amp\"] != -1]\n",
    "\n",
    "    # print(config)\n",
    "    for k, v in config.items():\n",
    "        print(f\"{k}: {v}\")\n",
    "\n",
    "    ## run GMMA association\n",
    "    event_idx0 = 1\n",
    "    assignments = []\n",
    "    catalogs, assignments = association(picks, stations, config, event_idx0, method=config[\"method\"])\n",
    "    event_idx0 += len(catalogs)\n",
    "\n",
    "    ## create catalog\n",
    "    catalogs = pd.DataFrame(\n",
    "        catalogs,\n",
    "        columns=[\"time\"]\n",
    "        + config[\"dims\"]\n",
    "        + [\n",
    "            \"magnitude\",\n",
    "            \"sigma_time\",\n",
    "            \"sigma_amp\",\n",
    "            \"cov_time_amp\",\n",
    "            \"event_index\",\n",
    "            \"gamma_score\",\n",
    "        ],\n",
    "    )\n",
    "\n",
    "    catalogs[[\"longitude\", \"latitude\"]] = catalogs.apply(\n",
    "        lambda x: pd.Series(proj(longitude=x[\"x(km)\"], latitude=x[\"y(km)\"], inverse=True)),\n",
    "        axis=1,\n",
    "    )\n",
    "    catalogs[\"depth(m)\"] = catalogs[\"z(km)\"].apply(lambda x: x * 1e3)\n",
    "\n",
    "    catalogs.sort_values(by=[\"time\"], inplace=True)\n",
    "    with open(gamma_catalog_csv, \"w\") as fp:\n",
    "        catalogs.to_csv(\n",
    "            fp,\n",
    "            # sep=\"\\t\",\n",
    "            index=False,\n",
    "            float_format=\"%.3f\",\n",
    "            date_format=\"%Y-%m-%dT%H:%M:%S.%f\",\n",
    "            columns=[\n",
    "                \"time\",\n",
    "                \"magnitude\",\n",
    "                \"longitude\",\n",
    "                \"latitude\",\n",
    "                \"depth(m)\",\n",
    "                \"sigma_time\",\n",
    "                \"sigma_amp\",\n",
    "                \"cov_time_amp\",\n",
    "                \"gamma_score\",\n",
    "                \"event_index\",\n",
    "            ],\n",
    "        )\n",
    "    # catalogs = catalogs[\n",
    "    #     ['time', 'magnitude', 'longitude', 'latitude', 'depth(m)', 'sigma_time', 'sigma_amp']\n",
    "    # ]\n",
    "\n",
    "    ## add assignment to picks\n",
    "    assignments = pd.DataFrame(assignments, columns=[\"pick_index\", \"event_index\", \"gamma_score\"])\n",
    "    picks = picks.join(assignments.set_index(\"pick_index\")).fillna(-1).astype({\"event_index\": int})\n",
    "    picks.sort_values(by=[\"timestamp\"], inplace=True)\n",
    "    with open(gamma_pick_csv, \"w\") as fp:\n",
    "        picks.to_csv(\n",
    "            fp,\n",
    "            # sep=\"\\t\",\n",
    "            index=False,\n",
    "            date_format=\"%Y-%m-%dT%H:%M:%S.%f\",\n",
    "            columns=[\n",
    "                \"station_id\",\n",
    "                \"phase_time\",\n",
    "                \"phase_type\",\n",
    "                \"phase_score\",\n",
    "                \"phase_amp\",\n",
    "                \"gamma_score\",\n",
    "                \"event_index\",\n",
    "            ],\n",
    "        )\n",
    "\n",
    "    ## upload to s3 bucket\n",
    "    try:\n",
    "        from minio import Minio\n",
    "\n",
    "        minioClient = Minio(s3_url, access_key=\"minio\", secret_key=\"minio123\", secure=secure)\n",
    "        if not minioClient.bucket_exists(bucket_name):\n",
    "            minioClient.make_bucket(bucket_name)\n",
    "\n",
    "        minioClient.fput_object(\n",
    "            bucket_name,\n",
    "            f\"{config['region']}/gamma/catalog_{node_i:03d}.csv\",\n",
    "            gamma_catalog_csv,\n",
    "        )\n",
    "\n",
    "        minioClient.fput_object(\n",
    "            bucket_name,\n",
    "            f\"{config['region']}/gamma/picks_{node_i:03d}.csv\",\n",
    "            gamma_pick_csv,\n",
    "        )\n",
    "\n",
    "    except Exception as err:\n",
    "        print(f\"ERROR: can not access minio service! \\n{err}\")\n",
    "        pass\n",
    "\n",
    "    ## upload to mongodb\n",
    "    try:\n",
    "        from pymongo import MongoClient\n",
    "\n",
    "        username = \"root\"\n",
    "        password = \"quakeflow123\"\n",
    "        client = MongoClient(f\"mongodb://{username}:{password}@127.0.0.1:27017\")\n",
    "        db = client[\"quakeflow\"]\n",
    "        collection = db[\"waveform\"]\n",
    "        for i, p in tqdm(picks.iterrows(), desc=\"Uploading to mongodb\"):\n",
    "            collection.update(\n",
    "                {\"_id\": f\"{p['station_id']}_{p['timestamp'].isoformat(timespec='milliseconds')}_{p['type']}\"},\n",
    "                {\"$set\": {\"event_index\": p[\"event_index\"]}},\n",
    "            )\n",
    "    except Exception as err:\n",
    "        print(f\"ERROR: can not access mongodb service! \\n{err}\")\n",
    "        pass\n",
    "\n",
    "    return f\"catalog_{node_i:03d}.csv\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {
    "scrolled": true,
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "region: Demo\n",
      "center: [-117.504, 35.705]\n",
      "xlim_degree: [-118.004, -117.004]\n",
      "ylim_degree: [35.205, 36.205]\n",
      "min_longitude: -118.004\n",
      "max_longitude: -117.004\n",
      "min_latitude: 35.205\n",
      "max_latitude: 36.205\n",
      "degree2km: 111.19492664455873\n",
      "starttime: 2019-07-04T17:00:00.000\n",
      "endtime: 2019-07-04T19:00:00.000\n",
      "networks: ['CI']\n",
      "channels: HH*,BH*,EH*,HN*\n",
      "client: SCEDC\n",
      "phasenet: {}\n",
      "gamma: {}\n",
      "hypodd: {'MAXEVENT': 10000.0}\n",
      "use_dbscan: True\n",
      "use_amplitude: True\n",
      "method: BGMM\n",
      "oversample_factor: 4\n",
      "dims: ['x(km)', 'y(km)', 'z(km)']\n",
      "vel: {'p': 6.0, 's': 3.468208092485549}\n",
      "x(km): [-55.59746332  55.59746332]\n",
      "y(km): [-55.59746332  55.59746332]\n",
      "z(km): (0, 60)\n",
      "bfgs_bounds: ((-56.59746332227937, 56.59746332227937), (-56.59746332227937, 56.59746332227937), (0, 61), (None, None))\n",
      "dbscan_eps: 10\n",
      "dbscan_min_samples: 3\n",
      "min_picks_per_eq: 10\n",
      "min_p_picks_per_eq: 0\n",
      "min_s_picks_per_eq: 0\n",
      "max_sigma11: 2.0\n",
      "max_sigma22: 2.0\n",
      "max_sigma12: 1.0\n",
      "Associating 78 clusters with 3 CPUs\n",
      "....................................\n",
      "Associated 100 events\n",
      ".......\n",
      "Initialization 1 did not converge.\n",
      ".......\n",
      "Associated 200 events\n",
      ".................\n",
      "Associated 300 events\n",
      "...........\n",
      "Initialization 1 did not converge.\n",
      "\n",
      "Associated 400 events\n",
      "ERROR: can not access minio service! \n",
      "HTTPConnectionPool(host='localhost', port=9000): Max retries exceeded with url: /catalogs?location= (Caused by NewConnectionError('<urllib3.connection.HTTPConnection object at 0x7f3ca5f03310>: Failed to establish a new connection: [Errno 111] Connection refused'))\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Uploading to mongodb: 0it [00:00, ?it/s]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "ERROR: can not access mongodb service! \n",
      "isoformat() got an unexpected keyword argument 'timespec'\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\n"
     ]
    }
   ],
   "source": [
    "if run_local:\n",
    "    catalog = gamma(\n",
    "        0,\n",
    "        root_dir(\"index.json\"),\n",
    "        root_dir(\"config.json\"),\n",
    "        root_dir(\"phasenet/picks.csv\"),\n",
    "        root_dir(\"stations.json\"),\n",
    "        root_dir(\"gamma_catalog.csv\"),\n",
    "        root_dir(\"gamma_picks.csv\"),\n",
    "        bucket_name=\"catalogs\",\n",
    "        s3_url=\"localhost:9000\",\n",
    "        secure=False,\n",
    "    )"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "gamma_op = comp.func_to_container_op(\n",
    "    gamma,\n",
    "    # base_image='zhuwq0/quakeflow-env:latest',\n",
    "    base_image=\"python:3.8\",\n",
    "    packages_to_install=[\n",
    "        \"pandas\",\n",
    "        \"numpy\",\n",
    "        \"scikit-learn\",\n",
    "        \"tqdm\",\n",
    "        \"minio\",\n",
    "        \"gmma\",\n",
    "        \"pyproj\",\n",
    "    ],\n",
    ")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Plot catalogs"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 960x480 with 3 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 512x528 with 3 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "if run_local:\n",
    "    %run plot_catalog.ipynb"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Merge parallel processing on cloud"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    " def merge_catalog(\n",
    "    index_json: InputPath(\"json\"),\n",
    "    config_json: InputPath(\"json\"),\n",
    "    catalog_csv: OutputPath(str),\n",
    "    picks_csv: OutputPath(str),\n",
    "    bucket_name: str = \"catalogs\",\n",
    "    s3_url: str = \"minio-service:9000\",\n",
    "    secure: bool = True,\n",
    "):\n",
    "\n",
    "    import json\n",
    "    import os\n",
    "    from glob import glob\n",
    "\n",
    "    import pandas as pd\n",
    "    from minio import Minio\n",
    "\n",
    "    minioClient = Minio(s3_url, access_key='minio', secret_key='minio123', secure=secure)\n",
    "\n",
    "    with open(index_json, \"r\") as fp:\n",
    "        index = json.load(fp)\n",
    "        \n",
    "    with open(config_json, \"r\") as fp:\n",
    "        config = json.load(fp)\n",
    "\n",
    "    objects = minioClient.list_objects(bucket_name, prefix=f\"{config['region']}/gamma\", recursive=True)\n",
    "\n",
    "    tmp_path = lambda x: os.path.join(\"/tmp/\", x)\n",
    "    for obj in objects:\n",
    "        print(obj._object_name)\n",
    "        minioClient.fget_object(bucket_name, obj._object_name, tmp_path(obj._object_name.split(\"/\")[-1]))\n",
    "\n",
    "    # files_catalog = sorted(glob(tmp_path(\"catalog_*.csv\")))\n",
    "    # files_picks = sorted(glob(tmp_path(\"picks_*.csv\")))\n",
    "    files_catalog = [tmp_path(f\"catalog_{node_i:03d}.csv\") for node_i in range(len(index))]\n",
    "    files_picks = [tmp_path(f\"picks_{node_i:03d}.csv\") for node_i in range(len(index))]\n",
    "    print(f\"Merge catalog: {files_catalog}\")\n",
    "    print(f\"Merge picks: {files_picks}\")\n",
    "\n",
    "    if len(files_catalog) > 0:\n",
    "        catalog_list = []\n",
    "        for f in files_catalog:\n",
    "            tmp = pd.read_csv(f, dtype=str)\n",
    "            tmp[\"file_index\"] = f.rstrip(\".csv\").split(\"_\")[-1]\n",
    "            catalog_list.append(tmp)\n",
    "        merged_catalog = pd.concat(catalog_list).sort_values(by=\"time\")\n",
    "        merged_catalog[\"match_id\"] = merged_catalog.apply(lambda x: f'{x[\"event_index\"]}_{x[\"file_index\"]}', axis=1)\n",
    "        merged_catalog.sort_values(by=\"time\", inplace=True, ignore_index=True)\n",
    "        merged_catalog.drop(columns=[\"event_index\", \"file_index\"], inplace=True)\n",
    "        merged_catalog[\"event_index\"] = merged_catalog.index.values + 1\n",
    "        mapping = dict(zip(merged_catalog[\"match_id\"], merged_catalog[\"event_index\"]))\n",
    "        merged_catalog.drop(columns=[\"match_id\"], inplace=True)\n",
    "        merged_catalog.to_csv(catalog_csv, index=False)\n",
    "        del merged_catalog\n",
    "\n",
    "        pick_list = []\n",
    "        for f in files_picks:\n",
    "            tmp = pd.read_csv(f, dtype=str)\n",
    "            tmp[\"file_index\"] = f.rstrip(\".csv\").split(\"_\")[-1]\n",
    "            pick_list.append(tmp)\n",
    "        merged_picks = pd.concat(pick_list).sort_values(by=\"phase_time\")\n",
    "        merged_picks[\"match_id\"] = merged_picks.apply(lambda x: f'{x[\"event_index\"]}_{x[\"file_index\"]}', axis=1)\n",
    "        merged_picks.drop(columns=[\"event_index\", \"file_index\"], inplace=True)\n",
    "        merged_picks[\"event_index\"] = merged_picks[\"match_id\"].apply(lambda x: mapping[x] if x in mapping else -1)\n",
    "        merged_picks.drop(columns=[\"match_id\"], inplace=True)\n",
    "        merged_picks.to_csv(picks_csv, index=False)\n",
    "        del merged_picks\n",
    "        \n",
    "        minioClient.fput_object(\n",
    "            bucket_name,\n",
    "            f\"{config['region']}/gamma_catalog.csv\",\n",
    "            catalog_csv,\n",
    "        )\n",
    "        \n",
    "        minioClient.fput_object(\n",
    "            bucket_name,\n",
    "            f\"{config['region']}/gamma_picks.csv\",\n",
    "            picks_csv,\n",
    "        )\n",
    "\n",
    "    # else:\n",
    "    #     with open(catalog_csv, \"w\") as fout:\n",
    "    #         pass\n",
    "    #     print(\"No catalog.csv found!\")\n",
    "    #     with open(picks_csv, \"w\") as fout:\n",
    "    #         pass\n",
    "    #     print(\"No picks.csv found!\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "merge_op = comp.func_to_container_op(\n",
    "    merge_catalog,\n",
    "    # base_image='zhuwq0/quakeflow-env:latest',\n",
    "    base_image=\"python:3.8\",\n",
    "    packages_to_install=[\"pandas\", \"minio\"],\n",
    ")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 7. HypoDD earthquake relocation"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Download and compile HypoDD"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "/home/jovyan/work/kubeflow\n",
      "Demo\t\t   cloud_dataset.ipynb\t    rsync.yaml\n",
      "Dockerfile\t   debug_magnitude.ipynb    tweepy_test.ipynb\n",
      "HYPODD\t\t   debug_pvc.yaml\t    waveforms\n",
      "HYPODD_1.3.tar.gz  env.yml\t\t    workflow-api.ipynb\n",
      "Hawaii\t\t   f77\t\t\t    workflow-kfp2.ipynb\n",
      "README.md\t   g77\t\t\t    workflow.ipynb\n",
      "Stream.ipynb\t   plot_catalog.ipynb\t    workflow_debug.ipynb\n",
      "Training.ipynb\t   prepare_test_data.ipynb\n"
     ]
    }
   ],
   "source": [
    "!pwd\n",
    "!ls"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "root_dir('hypodd'): Demo/hypodd\n",
      "/home/jovyan/work/kubeflow\n",
      "\u001b[01m\u001b[Kgcc:\u001b[m\u001b[K \u001b[01;31m\u001b[Kfatal error: \u001b[m\u001b[Kno input files\n",
      "compilation terminated.\n",
      "make: Entering directory '/home/jovyan/work/kubeflow/HYPODD/src'\n",
      "for d in hypoDD ncsn2pha ph2dt hista2ddsta; do (cd $d; echo $d; make all); done\n",
      "hypoDD\n",
      "make[1]: Entering directory '/home/jovyan/work/kubeflow/HYPODD/src/hypoDD'\n",
      "make[1]: Nothing to be done for 'all'.\n",
      "make[1]: Leaving directory '/home/jovyan/work/kubeflow/HYPODD/src/hypoDD'\n",
      "ncsn2pha\n",
      "make[1]: Entering directory '/home/jovyan/work/kubeflow/HYPODD/src/ncsn2pha'\n",
      "make[1]: Nothing to be done for 'all'.\n",
      "make[1]: Leaving directory '/home/jovyan/work/kubeflow/HYPODD/src/ncsn2pha'\n",
      "ph2dt\n",
      "make[1]: Entering directory '/home/jovyan/work/kubeflow/HYPODD/src/ph2dt'\n",
      "make[1]: Nothing to be done for 'all'.\n",
      "make[1]: Leaving directory '/home/jovyan/work/kubeflow/HYPODD/src/ph2dt'\n",
      "hista2ddsta\n",
      "make[1]: Entering directory '/home/jovyan/work/kubeflow/HYPODD/src/hista2ddsta'\n",
      "make[1]: Nothing to be done for 'all'.\n",
      "make[1]: Leaving directory '/home/jovyan/work/kubeflow/HYPODD/src/hista2ddsta'\n",
      "make: Leaving directory '/home/jovyan/work/kubeflow/HYPODD/src'\n"
     ]
    }
   ],
   "source": [
    "if run_local:\n",
    "    if not os.path.exists(\"HYPODD\"):\n",
    "        os.system(\"wget -O HYPODD_1.3.tar.gz http://www.ldeo.columbia.edu/~felixw/HYPODD/HYPODD_1.3.tar.gz\")\n",
    "        os.system(\"tar -xf HYPODD_1.3.tar.gz\")\n",
    "        os.system(\"ln -s $(which gfortran) ./HYPODD/f77\")\n",
    "        os.system(\"ln -s $(which gfortran) ./HYPODD/g77\")\n",
    "        os.environ[\"PATH\"] += os.pathsep + os.getcwd() + \"/HYPODD/\"\n",
    "        os.system(\"make -C HYPODD/src\")\n",
    "    if not os.path.exists(root_dir(\"hypodd\")):\n",
    "        os.mkdir(root_dir(\"hypodd\"))\n",
    "    print(f\"root_dir('hypodd'): {root_dir('hypodd')}\")\n",
    "    !pwd\n",
    "    !gcc\n",
    "    os.system(\"make -C HYPODD/src\")\n",
    "    os.system(f\"cp -r HYPODD/src/ph2dt/ph2dt {root_dir('hypodd')}/\")\n",
    "    os.system(f\"cp -r HYPODD/src/hypoDD/hypoDD {root_dir('hypodd')}/\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 7.1. Convert station format"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "def convert_station(\n",
    "    config_json: InputPath(\"json\"),\n",
    "    station_json: InputPath(\"json\"),\n",
    "    hypoinverse_station: OutputPath(str),\n",
    "    hypodd_station: OutputPath(str),\n",
    "    data_path: str = \"./\",\n",
    "    bucket_name: str = \"catalogs\",\n",
    "    s3_url: str = \"minio-service:9000\",\n",
    "    secure: bool = True,\n",
    "):\n",
    "\n",
    "    import os\n",
    "    import json\n",
    "\n",
    "    import pandas as pd\n",
    "    from tqdm import tqdm\n",
    "    \n",
    "\n",
    "    with open(config_json, \"r\") as fp:\n",
    "        config = json.load(fp)\n",
    "\n",
    "    hypodd_path = os.path.join(data_path, \"hypodd\")\n",
    "    if not os.path.exists(hypodd_path):\n",
    "        os.mkdir(hypodd_path)\n",
    "    hypoinv_path = os.path.join(data_path, \"hypoinv\")\n",
    "    if not os.path.exists(hypoinv_path):\n",
    "        os.mkdir(hypoinv_path)\n",
    "\n",
    "    stations = pd.read_json(station_json, orient=\"index\")\n",
    "\n",
    "    converted_hypoinverse = []\n",
    "    converted_hypodd = {}\n",
    "\n",
    "    for sta, row in tqdm(stations.iterrows()):\n",
    "\n",
    "        network_code, station_code, comp_code, channel_code = sta.split(\".\")\n",
    "        station_weight = \" \"\n",
    "        lat_degree = int(row[\"latitude\"])\n",
    "        lat_minute = (row[\"latitude\"] - lat_degree) * 60\n",
    "        north = \"N\" if lat_degree >= 0 else \"S\"\n",
    "        lng_degree = int(row[\"longitude\"])\n",
    "        lng_minute = (row[\"longitude\"] - lng_degree) * 60\n",
    "        west = \"W\" if lng_degree <= 0 else \"E\"\n",
    "        elevation = row[\"elevation(m)\"]\n",
    "        line_hypoinverse = f\"{station_code:<5} {network_code:<2} {comp_code[:-1]:<1}{channel_code:<3} {station_weight}{abs(lat_degree):2.0f} {abs(lat_minute):7.4f}{north}{abs(lng_degree):3.0f} {abs(lng_minute):7.4f}{west}{elevation:4.0f}\\n\"\n",
    "        converted_hypoinverse.append(line_hypoinverse)\n",
    "\n",
    "        tmp_code = f\"{station_code}{channel_code}\"\n",
    "        converted_hypodd[\n",
    "            f\"{station_code}{channel_code}\"\n",
    "        ] = f\"{tmp_code:<8s} {row['latitude']:.3f} {row['longitude']:.3f}\\n\"\n",
    "\n",
    "    with open(hypoinverse_station, \"w\") as f:\n",
    "        f.writelines(converted_hypoinverse)\n",
    "\n",
    "    with open(hypodd_station, \"w\") as f:\n",
    "        for k, v in converted_hypodd.items():\n",
    "            f.write(v)\n",
    "\n",
    "    ## upload to s3 bucket\n",
    "    try:\n",
    "        from minio import Minio\n",
    "\n",
    "        minioClient = Minio(s3_url, access_key=\"minio\", secret_key=\"minio123\", secure=secure)\n",
    "        if not minioClient.bucket_exists(bucket_name):\n",
    "            minioClient.make_bucket(bucket_name)\n",
    "\n",
    "        minioClient.fput_object(\n",
    "            bucket_name,\n",
    "            f\"{config['region']}/hypodd/stations.dat\",\n",
    "            hypodd_station,\n",
    "        )\n",
    "\n",
    "    except Exception as err:\n",
    "        print(f\"ERROR: can not access minio service! \\n{err}\")\n",
    "        pass\n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "52it [00:00, 3994.87it/s]\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "ERROR: can not access minio service! \n",
      "HTTPSConnectionPool(host='minio-service', port=9000): Max retries exceeded with url: /catalogs?location= (Caused by NewConnectionError('<urllib3.connection.HTTPSConnection object at 0x7f3ca638d910>: Failed to establish a new connection: [Errno -2] Name or service not known'))\n"
     ]
    }
   ],
   "source": [
    "if run_local:\n",
    "    convert_station(\n",
    "        root_dir(\"config.json\"),\n",
    "        root_dir(\"stations.json\"),\n",
    "        root_dir(\"hypoinv/stations.dat\"),\n",
    "        root_dir(\"hypodd/stations.dat\"),\n",
    "        root_dir(\"\"),\n",
    "    )"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "convert_station_op = comp.func_to_container_op(\n",
    "    convert_station,\n",
    "    base_image=\"python:3.8\",\n",
    "    packages_to_install=[\"pandas\", \"tqdm\", \"minio\"],\n",
    ")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Split large catalog due to memory and time"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "def split_hypodd(\n",
    "    config_json: InputPath(\"json\"),\n",
    "    catalog_csv: InputPath(str),\n",
    ") -> list:\n",
    "\n",
    "    import json\n",
    "    import pandas as pd\n",
    "\n",
    "    with open(config_json, \"r\") as fp:\n",
    "        config = json.load(fp)\n",
    "\n",
    "    events = pd.read_csv(catalog_csv)\n",
    "\n",
    "    if \"MAXEVENT\" in config[\"hypodd\"]:\n",
    "        MAXEVENT = config[\"hypodd\"][\"MAXEVENT\"]\n",
    "    else:\n",
    "        MAXEVENT = 1e4  ## segment by time\n",
    "\n",
    "    MAXEVENT = len(events) // ((len(events) - 1) // MAXEVENT + 1) + 1\n",
    "    num_parallel = int((len(events) - 1) // MAXEVENT + 1)\n",
    "\n",
    "    return list(range(num_parallel))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "if run_local:\n",
    "    nodes = split_hypodd(\n",
    "        root_dir(\"config.json\"),\n",
    "        root_dir(\"gamma_catalog.csv\"),\n",
    "    )"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "split_hypodd_op = comp.func_to_container_op(\n",
    "    split_hypodd,\n",
    "    base_image=\"python:3.8\",\n",
    "    packages_to_install=[\n",
    "        \"pandas\",\n",
    "    ],\n",
    ")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 7.2. Convert phase format"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "def convert_phase(\n",
    "    node_i: int,\n",
    "    config_json: InputPath(\"json\"),\n",
    "    picks_csv: InputPath(str),\n",
    "    catalog_csv: InputPath(str),\n",
    "    hypodd_phase: OutputPath(str),\n",
    "    data_path: str = \"./\",\n",
    "    bucket_name: str = \"catalogs\",\n",
    "    s3_url: str = \"minio-service:9000\",\n",
    "    secure: bool = True,\n",
    "):\n",
    "\n",
    "    import json\n",
    "    import os\n",
    "    from datetime import datetime\n",
    "\n",
    "    import pandas as pd\n",
    "    from tqdm import tqdm\n",
    "\n",
    "    with open(config_json, \"r\") as fp:\n",
    "        config = json.load(fp)\n",
    "    hypodd_path = os.path.join(data_path, \"hypodd\")\n",
    "    if not os.path.exists(hypodd_path):\n",
    "        os.mkdir(hypodd_path)\n",
    "\n",
    "    picks = pd.read_csv(picks_csv)\n",
    "    events = pd.read_csv(catalog_csv)\n",
    "\n",
    "    if \"MAXEVENT\" in config[\"hypodd\"]:\n",
    "        MAXEVENT = config[\"hypodd\"][\"MAXEVENT\"]\n",
    "    else:\n",
    "        MAXEVENT = 1e4  ## segment by time\n",
    "    MAXEVENT = len(events) // ((len(events) - 1) // MAXEVENT + 1) + 1\n",
    "    num_parallel = int((len(events) - 1) // MAXEVENT + 1)\n",
    "\n",
    "    events.sort_values(\"time\", inplace=True)\n",
    "    events = events.iloc[node_i::num_parallel]\n",
    "    picks = picks.loc[picks[\"event_index\"].isin(events[\"event_index\"])]\n",
    "    # output_lines = []\n",
    "    output_file = open(hypodd_phase, \"w\")\n",
    "\n",
    "    picks_by_event = picks.groupby(\"event_index\").groups\n",
    "    # for i in tqdm(range(node_i, len(events), num_parallel)):\n",
    "    #     event = events.iloc[i]\n",
    "    for i, event in events.iterrows():\n",
    "        event_time = datetime.strptime(event[\"time\"], \"%Y-%m-%dT%H:%M:%S.%f\")\n",
    "        lat = event[\"latitude\"]\n",
    "        lng = event[\"longitude\"]\n",
    "        dep = event[\"depth(m)\"] / 1e3\n",
    "        mag = event[\"magnitude\"]\n",
    "        EH = 0\n",
    "        EZ = 0\n",
    "        RMS = event[\"sigma_time\"]\n",
    "\n",
    "        year, month, day, hour, min, sec = (\n",
    "            event_time.year,\n",
    "            event_time.month,\n",
    "            event_time.day,\n",
    "            event_time.hour,\n",
    "            event_time.minute,\n",
    "            float(event_time.strftime(\"%S.%f\")),\n",
    "        )\n",
    "        event_line = f\"# {year:4d} {month:2d} {day:2d} {hour:2d} {min:2d} {sec:5.2f}  {lat:7.4f} {lng:9.4f}   {dep:5.2f} {mag:5.2f} {EH:5.2f} {EZ:5.2f} {RMS:5.2f} {event['event_index']:9d}\\n\"\n",
    "\n",
    "        # output_lines.append(event_line)\n",
    "        output_file.write(event_line)\n",
    "\n",
    "        picks_idx = picks_by_event[event[\"event_index\"]]\n",
    "        for j in picks_idx:\n",
    "            # pick = picks.iloc[j]\n",
    "            pick = picks.loc[j]\n",
    "            network_code, station_code, comp_code, channel_code = pick[\"station_id\"].split(\".\")\n",
    "            phase_type = pick[\"phase_type\"].upper()\n",
    "            phase_score = pick[\"phase_score\"]\n",
    "            pick_time = (datetime.strptime(pick[\"phase_time\"], \"%Y-%m-%dT%H:%M:%S.%f\") - event_time).total_seconds()\n",
    "            tmp_code = f\"{station_code}{channel_code}\"\n",
    "            pick_line = f\"{tmp_code:<7s}   {pick_time:6.3f}   {phase_score:5.4f}   {phase_type}\\n\"\n",
    "            # output_lines.append(pick_line)\n",
    "            output_file.write(pick_line)\n",
    "\n",
    "    # with open(hypodd_phase, \"w\") as fp:\n",
    "    #     fp.writelines(output_lines)\n",
    "\n",
    "    ## upload to s3 bucket\n",
    "    try:\n",
    "        from minio import Minio\n",
    "\n",
    "        minioClient = Minio(s3_url, access_key=\"minio\", secret_key=\"minio123\", secure=secure)\n",
    "        if not minioClient.bucket_exists(bucket_name):\n",
    "            minioClient.make_bucket(bucket_name)\n",
    "\n",
    "        minioClient.fput_object(\n",
    "            bucket_name,\n",
    "            f\"{config['region']}/hypodd/phase_{node_i:03d}.pha\",\n",
    "            hypodd_phase,\n",
    "        )\n",
    "\n",
    "    except Exception as err:\n",
    "        print(f\"ERROR: can not access minio service! \\n{err}\")\n",
    "        pass\n",
    "\n",
    "    return hypodd_phase"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "ERROR: can not access minio service! \n",
      "HTTPSConnectionPool(host='minio-service', port=9000): Max retries exceeded with url: /catalogs?location= (Caused by NewConnectionError('<urllib3.connection.HTTPSConnection object at 0x7f3ca6669760>: Failed to establish a new connection: [Errno -2] Name or service not known'))\n"
     ]
    }
   ],
   "source": [
    "if run_local:\n",
    "    for node_i in nodes:\n",
    "        convert_phase(\n",
    "            node_i,\n",
    "            root_dir(\"config.json\"),\n",
    "            root_dir(\"gamma_picks.csv\"),\n",
    "            root_dir(\"gamma_catalog.csv\"),\n",
    "            root_dir(\"hypodd/hypodd_phase.pha\"),\n",
    "            root_dir(\"\"),\n",
    "        )"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "convert_phase_op = comp.func_to_container_op(\n",
    "    convert_phase,\n",
    "    base_image=\"python:3.8\",\n",
    "    packages_to_install=[\"pandas\", \"tqdm\", \"minio\"],\n",
    ")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 7.3. Run ph2dt to calculate differential time between phases"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "def ph2dt(\n",
    "    node_i: int,\n",
    "    config_json: InputPath(\"json\"),\n",
    "    hypodd_phase: InputPath(str),\n",
    "    station_dat: InputPath(str),\n",
    "    ct_file: OutputPath(str),\n",
    "    hypodd_event: OutputPath(str),\n",
    "    data_path: str = \"./\",\n",
    "    bucket_name: str = \"catalogs\",\n",
    "    s3_url: str = \"minio-service:9000\",\n",
    "    secure: bool = True,\n",
    "):\n",
    "\n",
    "    import json\n",
    "    import os\n",
    "    from datetime import datetime\n",
    "\n",
    "    with open(config_json, \"r\") as fp:\n",
    "        config = json.load(fp)\n",
    "\n",
    "    hypodd_path = os.path.join(data_path, \"hypodd\")\n",
    "    if not os.path.exists(hypodd_path):\n",
    "        os.mkdir(hypodd_path)\n",
    "\n",
    "    # try:\n",
    "    #     minioClient = Minio(s3_url, access_key='minio', secret_key='minio123', secure=secure)\n",
    "    #     minioClient.fget_object(bucket_name, f\"{config['region']}/hypodd_{node_i:03d}.pha\", os.path.join(hypodd_path, f\"hypodd_{node_i:03d}.pha\"))\n",
    "    # except Exception as err:\n",
    "    #     print(f\"ERROR: can not access minio service! \\n{err}\")\n",
    "    #     pass\n",
    "\n",
    "    ph2dt = \"\"\"* ph2dt.inp - input control file for program ph2dt\n",
    "* Input station file:\n",
    "stations.dat\n",
    "* Input phase file:\n",
    "hypodd.pha\n",
    "*MINWGHT: min. pick weight allowed [0]\n",
    "*MAXDIST: max. distance in km between event pair and stations [200]\n",
    "*MAXSEP: max. hypocentral separation in km [10]\n",
    "*MAXNGH: max. number of neighbors per event [10]\n",
    "*MINLNK: min. number of links required to define a neighbor [8]\n",
    "*MINOBS: min. number of links per pair saved [8]\n",
    "*MAXOBS: max. number of links per pair saved [20]\n",
    "*MINWGHT MAXDIST MAXSEP MAXNGH MINLNK MINOBS MAXOBS\n",
    "   0      120     10     50     8      8     100\n",
    "\"\"\"\n",
    "\n",
    "    with open(os.path.join(hypodd_path, \"ph2dt.inp\"), \"w\") as fp:\n",
    "        fp.writelines(ph2dt)\n",
    "\n",
    "    def copy_file(fp_from, fp_to):\n",
    "        with open(fp_from, \"r\") as fp:\n",
    "            lines = fp.readlines()\n",
    "        with open(fp_to, \"w\") as fp:\n",
    "            fp.writelines(lines)\n",
    "\n",
    "    copy_file(hypodd_phase, os.path.join(hypodd_path, \"hypodd.pha\"))\n",
    "    copy_file(station_dat, os.path.join(hypodd_path, \"stations.dat\"))\n",
    "\n",
    "    PH2DT_CMD = f\"cd {hypodd_path} && ./ph2dt ph2dt.inp\"\n",
    "    print(PH2DT_CMD)\n",
    "    if os.system(PH2DT_CMD) != 0:\n",
    "        raise (\"{PH2DT_CMD}\" + \" failed!\")\n",
    "\n",
    "    copy_file(os.path.join(hypodd_path, \"dt.ct\"), ct_file)\n",
    "    copy_file(os.path.join(hypodd_path, \"event.sel\"), hypodd_event)\n",
    "\n",
    "    ## upload to s3 bucket\n",
    "    try:\n",
    "        from minio import Minio\n",
    "\n",
    "        minioClient = Minio(s3_url, access_key=\"minio\", secret_key=\"minio123\", secure=secure)\n",
    "        if not minioClient.bucket_exists(bucket_name):\n",
    "            minioClient.make_bucket(bucket_name)\n",
    "\n",
    "        minioClient.fput_object(\n",
    "            bucket_name,\n",
    "            f\"{config['region']}/hypodd/dt_{node_i:03d}.ct\",\n",
    "            ct_file,\n",
    "        )\n",
    "\n",
    "        minioClient.fput_object(\n",
    "            bucket_name,\n",
    "            f\"{config['region']}/hypodd/event_{node_i:03d}.sel\",\n",
    "            hypodd_event,\n",
    "        )\n",
    "\n",
    "    except Exception as err:\n",
    "        print(f\"ERROR: can not access minio service! \\n{err}\")\n",
    "        pass\n",
    "\n",
    "    # try:\n",
    "    #     minioClient.fput_object(\n",
    "    #         bucket_name,\n",
    "    #         f\"{config['region']}/dt_{node_i:03d}.ct\",\n",
    "    #         f\"{os.path.join(hypodd_path, 'dt.ct')}\",\n",
    "    #     )\n",
    "    #     minioClient.fput_object(\n",
    "    #         bucket_name,\n",
    "    #         f\"{config['region']}/event_{node_i:03d}.dat\",\n",
    "    #         f\"{os.path.join(hypodd_path, 'event.dat')}\",\n",
    "    #     )\n",
    "    #     minioClient.fput_object(\n",
    "    #         bucket_name,\n",
    "    #         f\"{config['region']}/event_{node_i:03d}.sel\",\n",
    "    #         f\"{os.path.join(hypodd_path, 'event.sel')}\",\n",
    "    #     )\n",
    "    # except Exception as err:\n",
    "    #     print(f\"ERROR: can not access minio service! \\n{err}\")\n",
    "    #     pass\n",
    "\n",
    "    return 0"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "cd Demo/hypodd && ./ph2dt ph2dt.inp\n",
      "starting ph2dt (v1.3 - 08/2010)...                          \u0000\u0000\u0000\u0000\u0000\n",
      "\n",
      "reading data ...\n",
      " > stations =           46\n",
      " > events total =          404\n",
      " > events selected =          404\n",
      " > phases =        16977\n",
      "forming dtimes...\n",
      " > P-phase pairs total =       147229\n",
      " > S-phase pairs total =       173202\n",
      " > outliers =         2885  (           0 %)\n",
      " > phases at stations not in station list =            0\n",
      " > phases at distances larger than MAXDIST =            0\n",
      " > P-phase pairs selected =       141194  (          95 %)\n",
      " > S-phase pairs selected =       167172  (          96 %)\n",
      " > weakly linked events =          105  (          25 %)\n",
      " > linked event pairs =        10265\n",
      " > average links per pair =           30\n",
      " > average offset (km) betw. linked events =    5.02860928    \n",
      " > average offset (km) betw. strongly linked events =    5.02860928    \n",
      " > maximum offset (km) betw. strongly linked events =    9.99885368    \n",
      "\n",
      "Done.                      \u0000\u0000\u0000\u0000\u0000\n",
      "\n",
      "Output files: dt.ct; event.dat; event.sel; ph2dt.log\n",
      "ph2dt parameters were: \n",
      " (minwght,maxdist,maxsep,maxngh,minlnk,minobs,maxobs)\n",
      "   0.00000000       120.000000       10.0000000              50           8           8         100\n",
      "ERROR: can not access minio service! \n",
      "HTTPSConnectionPool(host='minio-service', port=9000): Max retries exceeded with url: /catalogs?location= (Caused by NewConnectionError('<urllib3.connection.HTTPSConnection object at 0x7f3ca63e9eb0>: Failed to establish a new connection: [Errno -2] Name or service not known'))\n"
     ]
    }
   ],
   "source": [
    "if run_local:\n",
    "    ph2dt(\n",
    "        0,\n",
    "        root_dir(\"config.json\"),\n",
    "        root_dir(\"hypodd/hypodd_phase.pha\"),\n",
    "        root_dir(\"hypodd/stations.dat\"),\n",
    "        root_dir(\"hypodd/dt.ct\"),\n",
    "        root_dir(\"hypodd/event.sel\"),\n",
    "        root_dir(\"\"),\n",
    "    )"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "ph2dt_op = comp.func_to_container_op(ph2dt, base_image=\"zhuwq0/hypodd-api:1.0\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 7.4. Run HypoDD re-location"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "def hypodd_ct(\n",
    "    node_i: int,\n",
    "    config_json: InputPath(\"json\"),\n",
    "    ct_file: InputPath(str),\n",
    "    event: InputPath(str),\n",
    "    station: InputPath(str),\n",
    "    catalog_txt: OutputPath(str),\n",
    "    data_path: str = \"./\",\n",
    "    bucket_name: str = \"catalogs\",\n",
    "    s3_url: str = \"minio-service:9000\",\n",
    "    secure: bool = True,\n",
    "):\n",
    "    import json\n",
    "    import os\n",
    "    from datetime import datetime\n",
    "\n",
    "    with open(config_json, \"r\") as fp:\n",
    "        config = json.load(fp)\n",
    "    hypodd_path = os.path.join(data_path, \"hypodd\")\n",
    "\n",
    "    ct_inp = \"\"\"* RELOC.INP:\n",
    "*--- input file selection\n",
    "* cross correlation diff times:\n",
    "\n",
    "*\n",
    "*catalog P diff times:\n",
    "dt.ct\n",
    "*\n",
    "* event file:\n",
    "event.sel\n",
    "*\n",
    "* station file:\n",
    "stations.dat\n",
    "*\n",
    "*--- output file selection\n",
    "* original locations:\n",
    "hypodd.loc\n",
    "* relocations:\n",
    "hypodd.reloc\n",
    "* station information:\n",
    "hypodd.sta\n",
    "* residual information:\n",
    "hypodd.res\n",
    "* source paramater information:\n",
    "hypodd.src\n",
    "*\n",
    "*--- data type selection: \n",
    "* IDAT:  0 = synthetics; 1= cross corr; 2= catalog; 3= cross & cat \n",
    "* IPHA: 1= P; 2= S; 3= P&S\n",
    "* DIST:max dist [km] between cluster centroid and station \n",
    "* IDAT   IPHA   DIST\n",
    "    2     3     120\n",
    "*\n",
    "*--- event clustering:\n",
    "* OBSCC:    min # of obs/pair for crosstime data (0= no clustering)\n",
    "* OBSCT:    min # of obs/pair for network data (0= no clustering)\n",
    "* OBSCC  OBSCT    \n",
    "     0     8        \n",
    "*\n",
    "*--- solution control:\n",
    "* ISTART:  \t1 = from single source; 2 = from network sources\n",
    "* ISOLV:\t1 = SVD, 2=lsqr\n",
    "* NSET:      \tnumber of sets of iteration with specifications following\n",
    "*  ISTART  ISOLV  NSET\n",
    "    2        2      4\n",
    "*\n",
    "*--- data weighting and re-weighting: \n",
    "* NITER: \t\tlast iteration to used the following weights\n",
    "* WTCCP, WTCCS:\t\tweight cross P, S \n",
    "* WTCTP, WTCTS:\t\tweight catalog P, S \n",
    "* WRCC, WRCT:\t\tresidual threshold in sec for cross, catalog data \n",
    "* WDCC, WDCT:  \t\tmax dist [km] between cross, catalog linked pairs\n",
    "* DAMP:    \t\tdamping (for lsqr only) \n",
    "*       ---  CROSS DATA ----- ----CATALOG DATA ----\n",
    "* NITER WTCCP WTCCS WRCC WDCC WTCTP WTCTS WRCT WDCT DAMP\n",
    "   4     -9     -9   -9    -9   1     1      8   -9  70 \n",
    "   4     -9     -9   -9    -9   1     1      6    4  70 \n",
    "   4     -9     -9   -9    -9   1    0.8     4    2  70 \n",
    "   4     -9     -9   -9    -9   1    0.8     3    2  70 \n",
    "*\n",
    "*--- 1D model:\n",
    "* NLAY:\t\tnumber of model layers  \n",
    "* RATIO:\tvp/vs ratio \n",
    "* TOP:\t\tdepths of top of layer (km) \n",
    "* VEL: \t\tlayer velocities (km/s)\n",
    "* NLAY  RATIO \n",
    "   12     1.82\n",
    "* TOP \n",
    "0.0 1.0 3.0 5.0 7.0 9.0 11.0 13.0 17.0 21.0 31.00 31.10\n",
    "* VEL\n",
    "5.30 5.65 5.93 6.20 6.20 6.20 6.20 6.20 6.20 6.20 7.50 8.11\n",
    "*\n",
    "*--- event selection:\n",
    "* CID: \tcluster to be relocated (0 = all)\n",
    "* ID:\tcuspids of event to be relocated (8 per line)\n",
    "* CID    \n",
    "    0      \n",
    "* ID\n",
    "\"\"\"\n",
    "\n",
    "    with open(os.path.join(hypodd_path, \"ct.inp\"), \"w\") as fp:\n",
    "        fp.writelines(ct_inp)\n",
    "\n",
    "    def copy_file(fp_from, fp_to):\n",
    "        with open(fp_from, \"r\") as fp:\n",
    "            lines = fp.readlines()\n",
    "        with open(fp_to, \"w\") as fp:\n",
    "            fp.writelines(lines)\n",
    "\n",
    "    copy_file(ct_file, os.path.join(hypodd_path, \"dt.ct\"))\n",
    "    copy_file(event, os.path.join(hypodd_path, \"event.sel\"))\n",
    "    copy_file(station, os.path.join(hypodd_path, \"stations.dat\"))\n",
    "\n",
    "    # os.system(f\"cat {ct_file}\")\n",
    "    # os.system(f\"cat {event}\")\n",
    "    # os.system(f\"cat {station}\")\n",
    "\n",
    "    HYPODD_CMD = f\"cd {hypodd_path} && ./hypoDD ct.inp\"\n",
    "    print(HYPODD_CMD)\n",
    "    if os.system(HYPODD_CMD) != 0:\n",
    "        raise (\"{HYPODD_CMD}\" + \" failed!\")\n",
    "\n",
    "    copy_file(os.path.join(hypodd_path, \"hypodd.reloc\"), catalog_txt)\n",
    "\n",
    "    try:\n",
    "        from minio import Minio\n",
    "\n",
    "        minioClient = Minio(s3_url, access_key=\"minio\", secret_key=\"minio123\", secure=secure)\n",
    "        minioClient.fput_object(\n",
    "            bucket_name,\n",
    "            f\"{config['region']}/hypodd/hypodd_ct_{node_i:03d}.reloc\",\n",
    "            catalog_txt,\n",
    "        )\n",
    "    except Exception as err:\n",
    "        print(f\"ERROR: can not access minio service! \\n{err}\")\n",
    "        pass"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "cd Demo/hypodd && ./hypoDD ct.inp\n",
      "starting hypoDD (v1.3 - 11/2010)...          Fri Feb  7 23:26:24 2025�\n",
      "INPUT FILES:\n",
      "cross dtime data:  \n",
      "catalog dtime data: dt.ct\n",
      "events: event.sel\n",
      "stations: stations.dat\n",
      "OUTPUT FILES:\n",
      "initial locations: hypodd.loc\n",
      "relocated events: hypodd.reloc\n",
      "event pair residuals: hypodd.res\n",
      "station residuals: hypodd.sta\n",
      "source parameters: hypodd.src\n",
      " Relocate all clusters\n",
      " Relocate all events\n",
      "Reading data ...   Fri Feb  7 23:26:24 2025 \n",
      "# events =   404\n",
      "# stations < maxdist =     46\n",
      "# catalog P dtimes =  141194\n",
      "# catalog S dtimes =  167172\n",
      "# dtimes total =   308366\n",
      "# events after dtime match =        363\n",
      "# stations =     45\n",
      "clustering ...  \n",
      "Clustered events:   363\n",
      "Isolated events:     0\n",
      "# clusters:    3\n",
      "Cluster   1:   357 events\n",
      "Cluster   2:     4 events\n",
      "Cluster   3:     2 events\n",
      "\n",
      "RELOCATION OF CLUSTER: 1     Fri Feb  7 23:26:28 2025�\n",
      "----------------------\n",
      "Reading data ...   Fri Feb  7 23:26:28 2025�\n",
      "# events =   357\n",
      "# stations < maxdist =     46\n",
      "# catalog P dtimes =  141180\n",
      "# catalog S dtimes =  167143\n",
      "# dtimes total =   308323\n",
      "# events after dtime match =        357\n",
      "# stations =     45\n",
      "Initial trial sources =   357\n",
      "\n",
      "  IT   EV  CT    RMSCT   RMSST   DX   DY   DZ   DT   OS  AQ  CND\n",
      "        %   %   ms     %    ms    m    m    m   ms    m \n",
      " 1    100 100  226 -24.6     0  774  689 2601  178    0   9  192\n",
      " 2     97  99  225  -0.6     0  769  648 2564  169    0   1  192\n",
      " 3  1  97  99  224  -0.3   434  760  645 2575  169 1283   0  191\n",
      " 4     97  98  181 -19.2   434  324  225 1229   84 1283   8  192\n",
      " 5  2  95  96  178  -1.7   375  326  227 1040   81  672   0  191\n",
      " 6     95  95  157 -11.7   375  215  131 1390   48  672   2  187\n",
      " 7  3  94  95  156  -0.6   344  214  131 1378   47 1155   0  187\n",
      " 8     94  94  148  -5.4   344  162  112 1563   32 1155   3  216\n",
      " 9  4  93  93  146  -1.4   333  163  112  559   31  493   0  219\n",
      "10  5  86  47  131 -10.2   273  137  101  312   27  441   0  135\n",
      "11  6  86  44  115 -11.9   238   75   50  161   16  449   0  127\n",
      "12  7  86  44  110  -4.3   231   54   38  117   12  471   0  123\n",
      "13  8  86  43  108  -2.4   225   43   29  100    9  492   0  123\n",
      "14  9  79  14   78 -27.7   149   49   40   76    7  395   0   67\n",
      "15 10  78  13   67 -14.0   125   33   27   49    5  398   0   64\n",
      "16 11  78  13   63  -6.2   119   26   22   40    4  391   0   62\n",
      "17 12  77  12   60  -4.1   114   22   16   36    3  372   0   60\n",
      "18 13  77  11   50 -17.2    90   20   17   36    3  373   0   58\n",
      "19 14  76  11   46  -8.2    81   16   13   29    3  370   0   56\n",
      "20 15  76  11   43  -5.2    76   13   10   24    2  372   0   54\n",
      "21 16  76  10   42  -3.5    75   10    8   22    2  395   0   52\n",
      "\n",
      "writing out results ...\n",
      "\n",
      "RELOCATION OF CLUSTER: 2     Fri Feb  7 23:28:53 2025�\n",
      "----------------------\n",
      "Reading data ...   Fri Feb  7 23:28:53 2025�\n",
      "# events =     4\n",
      "# stations < maxdist =     46\n",
      "# catalog P dtimes =      10\n",
      "# catalog S dtimes =      25\n",
      "# dtimes total =       35\n",
      "# events after dtime match =          4\n",
      "# stations =     10\n",
      "Initial trial sources =     4\n",
      "\n",
      "  IT   EV  CT    RMSCT   RMSST   DX   DY   DZ   DT   OS  AQ  CND\n",
      "        %   %   ms     %    ms    m    m    m   ms    m \n",
      " 1  1 100 100  155  -0.3   280    3    1    2    1    0   0    3\n",
      " 2  2 100 100  155  -0.3   279    3    1    1    0    1   0    3\n",
      " 3  3 100 100  155  -0.2   278    3    1    1    0    1   0    3\n",
      " 4  4 100 100  154  -0.1   278    3    1    1    0    1   0    3\n",
      " 5  5  75  49  218  41.2   320    3    1    1    0    1   0    2\n",
      " 6  6  75  49  211  -3.1   320    2    1    1    0    1   0    2\n",
      " 7  7  75  49  211  -0.2   320    2    1    1    0    1   0    2\n",
      " 8  8  75  49  211  -0.0   320    2    1    1    0    0   0    2\n",
      " >>> Warning: ndt < 4*nev\n",
      " 9  9  50  23  130 -38.2   280    0    1    1    0    5   0    2\n",
      " >>> Warning: ndt < 4*nev\n",
      "10 10  50  20  113 -13.5   199    0    1    1    0    5   0    2\n",
      " >>> Warning: ndt < 4*nev\n",
      "11 11  50  17   96 -14.4   137    0    0    1    0    5   0    2\n",
      " >>> Warning: ndt < 4*nev\n",
      "12 12  50  17   97   0.4   137    0    0    0    0    5   0    2\n",
      " >>> Warning: ndt < 4*nev\n",
      "13 13  50  11   96  -0.7   107    0    0    0    0    5   0    2\n",
      " >>> Warning: ndt < 4*nev\n",
      "14 14  50   6   84 -12.9    64    0    0    0    0    5   0    2\n",
      " >>> Warning: ndt < 4*nev\n",
      "15 15  50   6   87   4.1    64    0    0    0    0    5   0    2\n",
      " >>> Warning: ndt < 4*nev\n",
      "16 16  50   6   87  -0.0    64    0    0    0    0    5   0    2\n",
      "\n",
      "writing out results ...\n",
      "\n",
      "RELOCATION OF CLUSTER: 3     Fri Feb  7 23:28:53 2025�\n",
      "----------------------\n",
      "Reading data ...   Fri Feb  7 23:28:53 2025�\n",
      "# events =     2\n",
      "# stations < maxdist =     46\n",
      "# catalog P dtimes =       4\n",
      "# catalog S dtimes =       4\n",
      "# dtimes total =        8\n",
      "# events after dtime match =          2\n",
      "# stations =      4\n",
      "Initial trial sources =     2\n",
      " >>> Warning: ndt < 4*nev\n",
      " >>> Warning: ndt < 4*nev\n",
      "\n",
      "  IT   EV  CT    RMSCT   RMSST   DX   DY   DZ   DT   OS  AQ  CND\n",
      "        %   %   ms     %    ms    m    m    m   ms    m \n",
      " 1  1 100 100  353  -0.2   500    1    2    3    0    3   0    2\n",
      " >>> Warning: ndt < 4*nev\n",
      " 2  2 100 100  353  -0.2   500    1    2    2    0    4   0    2\n",
      " >>> Warning: ndt < 4*nev\n",
      " 3  3 100 100  352  -0.2   499    1    2    2    0    6   0    2\n",
      " >>> Warning: ndt < 4*nev\n",
      " 4  4 100 100  351  -0.2   499    1    2    2    0    7   0    2\n",
      "  Cluster has less than 2 events.\n",
      "ERROR: can not access minio service! \n",
      "HTTPSConnectionPool(host='minio-service', port=9000): Max retries exceeded with url: /catalogs?location= (Caused by NewConnectionError('<urllib3.connection.HTTPSConnection object at 0x7f3ca66ee8e0>: Failed to establish a new connection: [Errno -2] Name or service not known'))\n"
     ]
    }
   ],
   "source": [
    "if run_local:\n",
    "    hypodd_ct(\n",
    "        0,\n",
    "        root_dir(\"config.json\"),\n",
    "        root_dir(\"hypodd/dt.ct\"),\n",
    "        root_dir(\"hypodd/event.sel\"),\n",
    "        root_dir(\"hypodd/stations.dat\"),\n",
    "        root_dir(\"hypodd_ct_catalog.txt\"),\n",
    "        root_dir(\"\"),\n",
    "    )"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "hypodd_ct_op = comp.func_to_container_op(hypodd_ct, base_image=\"zhuwq0/hypodd-api:1.0\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "if run_local:\n",
    "    from datetime import datetime\n",
    "\n",
    "    import matplotlib.pyplot as plt\n",
    "    import pandas as pd\n",
    "\n",
    "    catalog_hypodd = pd.read_csv(\n",
    "        root_dir(f\"hypodd/hypodd.reloc\"),\n",
    "        sep=\"\\s+\",\n",
    "        names=[\n",
    "            \"ID\",\n",
    "            \"LAT\",\n",
    "            \"LON\",\n",
    "            \"DEPTH\",\n",
    "            \"X\",\n",
    "            \"Y\",\n",
    "            \"Z\",\n",
    "            \"EX\",\n",
    "            \"EY\",\n",
    "            \"EZ\",\n",
    "            \"YR\",\n",
    "            \"MO\",\n",
    "            \"DY\",\n",
    "            \"HR\",\n",
    "            \"MI\",\n",
    "            \"SC\",\n",
    "            \"MAG\",\n",
    "            \"NCCP\",\n",
    "            \"NCCS\",\n",
    "            \"NCTP\",\n",
    "            \"NCTS\",\n",
    "            \"RCC\",\n",
    "            \"RCT\",\n",
    "            \"CID\",\n",
    "        ],\n",
    "    )\n",
    "    catalog_hypodd[\"time\"] = catalog_hypodd.apply(\n",
    "        lambda x: f'{x[\"YR\"]:04.0f}-{x[\"MO\"]:02.0f}-{x[\"DY\"]:02.0f}T{x[\"HR\"]:02.0f}:{x[\"MI\"]:02.0f}:{min(x[\"SC\"], 59.999):05.3f}',\n",
    "        axis=1,\n",
    "    )\n",
    "    catalog_hypodd[\"time\"] = catalog_hypodd[\"time\"].apply(lambda x: datetime.strptime(x, \"%Y-%m-%dT%H:%M:%S.%f\"))\n",
    "    plt.figure()\n",
    "    plt.plot(catalog_hypodd[\"LON\"], catalog_hypodd[\"LAT\"], \".\")\n",
    "    plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "def cross_correlation(\n",
    "    ct_file: InputPath(str),\n",
    "    catalog_file: InputPath(str),\n",
    "    picks_file: InputPath(str),\n",
    "    cc_file: OutputPath(str),\n",
    "):\n",
    "\n",
    "    import time\n",
    "    from multiprocessing import Manager, Process\n",
    "\n",
    "    import numpy as np\n",
    "    import pandas as pd\n",
    "    from pymongo import MongoClient\n",
    "    from tqdm import tqdm\n",
    "\n",
    "    catalog = pd.read_csv(\n",
    "        catalog_file,\n",
    "        sep=\"\\t\",\n",
    "        parse_dates=[\"time\"],\n",
    "        index_col=[\"event_idx\"],\n",
    "        dtype={\"event_idx\": str},\n",
    "    )\n",
    "    picks = pd.read_csv(picks_file, sep=\"\\t\", parse_dates=[\"timestamp\"], dtype={\"event_idx\": str})\n",
    "    picks[\"station\"] = picks[\"id\"].apply(lambda x: x.split(\".\")[1] + x.split(\".\")[3])\n",
    "    picks = picks.set_index([\"event_idx\", \"station\", \"type\"])\n",
    "    picks = picks.sort_index()\n",
    "\n",
    "    pick_index = 100\n",
    "    lo = pick_index - 50\n",
    "    hi = pick_index + 100\n",
    "    dt = 0.01\n",
    "\n",
    "    ct_dict = Manager().dict()\n",
    "    cc_dict = Manager().dict()\n",
    "    with open(ct_file) as fct:\n",
    "        meta = fct.readlines()\n",
    "        for i, line in enumerate(meta):\n",
    "            if line[0] == \"#\":\n",
    "                if i > 0:\n",
    "                    ct_dict[key] = value\n",
    "                key = line\n",
    "                value = []\n",
    "                continue\n",
    "            value.append(line)\n",
    "        ct_dict[key] = value\n",
    "    keys = sorted(list(ct_dict.keys()))\n",
    "\n",
    "    def calc_cross_correlation(keys, ct_dict, cc_dict):\n",
    "        username = \"root\"\n",
    "        password = \"quakeflow123\"\n",
    "        # client = MongoClient(f\"mongodb://{username}:{password}@127.0.0.1:27017\")\n",
    "        client = MongoClient(f\"mongodb://{username}:{password}@quakeflow-mongodb.default.svc.cluster.local:27017\")\n",
    "        db = client[\"quakeflow\"]\n",
    "        collection = db[\"waveform\"]\n",
    "        # normalize = lambda x: (x - np.mean(x, axis=0, keepdims=True)) / np.std(x, axis=0, keepdims=True)\n",
    "\n",
    "        for key in keys:\n",
    "            tmp = key.split()\n",
    "            ID1, ID2 = tmp[1], tmp[2]\n",
    "            key_cc = f\"#    {ID1}    {ID2}    0.0\\n\"\n",
    "            lines_cc = []\n",
    "            for line in ct_dict[key]:\n",
    "                tmp = line.split()\n",
    "                STA, TT1, TT2, WGT, PHA = (\n",
    "                    tmp[0],\n",
    "                    tmp[1],\n",
    "                    tmp[2],\n",
    "                    tmp[3],\n",
    "                    tmp[4],\n",
    "                )  ##HypoDD format\n",
    "\n",
    "                for i, row1 in picks.loc[(ID1, STA, PHA)].iterrows():\n",
    "\n",
    "                    data1 = collection.find_one(\n",
    "                        {\"_id\": f\"{row1['id']}_{row1['timestamp'].isoformat(timespec='milliseconds')}_{PHA}\"}\n",
    "                    )\n",
    "\n",
    "                    for j, row2 in picks.loc[(ID2, STA, PHA)].iterrows():\n",
    "\n",
    "                        data2 = collection.find_one(\n",
    "                            {\"_id\": f\"{row2['id']}_{row2['timestamp'].isoformat(timespec='milliseconds')}_{PHA}\"}\n",
    "                        )\n",
    "\n",
    "                        # if PHA == \"P\":  # Z\n",
    "                        #     waveform1 = np.array(data1[\"waveform\"])[lo:hi, -1:]\n",
    "                        #     waveform2 = np.array(data2[\"waveform\"])[lo:hi, -1:]\n",
    "                        # elif PHA == \"S\":  # E, N\n",
    "                        #     waveform1 = np.array(data1[\"waveform\"])[lo:hi, :-1]\n",
    "                        #     waveform2 = np.array(data2[\"waveform\"])[lo:hi, :-1]\n",
    "                        # else:\n",
    "                        #     raise (Exception(\"PHA must be P or S\"))\n",
    "                        waveform1 = np.array(data1[\"waveform\"])[lo:hi, :]\n",
    "                        waveform2 = np.array(data2[\"waveform\"])[lo:hi, :]\n",
    "\n",
    "                        cc = np.zeros(waveform1.shape[0])\n",
    "                        for k in range(waveform1.shape[1]):\n",
    "                            cc += np.correlate(waveform1[:, k], waveform2[:, k], mode=\"same\")\n",
    "                        norm = np.sqrt(np.sum(waveform1**2) * np.sum(waveform2**2))\n",
    "                        if norm == 0:\n",
    "                            continue\n",
    "                        else:\n",
    "                            cc /= norm\n",
    "                        shift = (np.argmax(np.abs(cc)) - waveform1.shape[0] // 2) * dt + float(TT1) - float(TT2)\n",
    "                        coeff = np.max(np.abs(cc))\n",
    "\n",
    "                        if not np.isnan(coeff):\n",
    "                            lines_cc.append(f\"{STA:<7s}    {shift:.5f}    {coeff:.3f}    {PHA}\\n\")\n",
    "\n",
    "                cc_dict[key_cc] = lines_cc\n",
    "\n",
    "        return 0\n",
    "\n",
    "    t0 = time.time()\n",
    "    processes = []\n",
    "    num_process = 16\n",
    "    for i in range(num_process):\n",
    "        p = Process(target=calc_cross_correlation, args=(keys[i::num_process], ct_dict, cc_dict))\n",
    "        p.start()\n",
    "        processes.append(p)\n",
    "    for p in processes:\n",
    "        p.join()\n",
    "    print(f\"{num_process} process: time = {time.time()-t0:.1f}\")\n",
    "\n",
    "    with open(cc_file, \"w\") as fcc:\n",
    "        for key in cc_dict:\n",
    "            fcc.write(key)\n",
    "            for line in cc_dict[key]:\n",
    "                fcc.write(line)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "cc_op = comp.func_to_container_op(\n",
    "    cross_correlation,\n",
    "    base_image=\"python:3.8\",\n",
    "    packages_to_install=[\"pandas\", \"tqdm\", \"minio\", \"pymongo\"],\n",
    ")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "def hypodd_cc(\n",
    "    i: int,\n",
    "    config_json: InputPath(\"json\"),\n",
    "    ct_file: InputPath(str),\n",
    "    cc_file: InputPath(str),\n",
    "    event: InputPath(str),\n",
    "    station: InputPath(str),\n",
    "    inp_file: str = \"hypodd_cc.inp\",\n",
    "    bucket_name: str = \"catalogs\",\n",
    "    s3_url: str = \"minio-service:9000\",\n",
    "    secure: bool = True,\n",
    "):\n",
    "    import json\n",
    "    import os\n",
    "\n",
    "    from minio import Minio\n",
    "\n",
    "    with open(config_json, \"r\") as fp:\n",
    "        config = json.load(fp)\n",
    "\n",
    "    minioClient = Minio(s3_url, access_key=\"minio\", secret_key=\"minio123\", secure=secure)\n",
    "\n",
    "    os.system(f\"cat {ct_file} > dt.ct\")\n",
    "    os.system(f\"cat {cc_file} > dt.cc\")\n",
    "    os.system(f\"cat {event} > event.sel\")\n",
    "    os.system(f\"cat {station} > stations_hypodd.dat \")\n",
    "\n",
    "    HYPODD_CMD = f\"HYPODD/src/hypodd/hypodd {inp_file}\"\n",
    "    if os.system(HYPODD_CMD) != 0:\n",
    "        raise (\"{HYPODD_CMD}\" + \" failed!\")\n",
    "    os.system(f\"mv hypodd.reloc hypodd_cc_{i:03d}.reloc\")\n",
    "\n",
    "    minioClient.fput_object(\n",
    "        bucket_name,\n",
    "        f\"{config['region']}/hypodd_cc_{i:03d}.reloc\",\n",
    "        f\"hypodd_cc_{i:03d}.reloc\",\n",
    "    )"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "hypodd_cc_op = comp.func_to_container_op(hypodd_cc, base_image=\"zhuwq0/hypodd-api:1.0\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Merge hypodd results"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "def merge_hypodd(\n",
    "    index: list,\n",
    "    config_json: InputPath(\"json\"),\n",
    "    catalog_ct: OutputPath(str),\n",
    "    catalog_cc: OutputPath(str),\n",
    "    bucket_name: str = \"catalogs\",\n",
    "    s3_url: str = \"minio-service:9000\",\n",
    "    secure: bool = True,\n",
    "):\n",
    "    import json\n",
    "    import os\n",
    "    from glob import glob\n",
    "\n",
    "    from minio import Minio\n",
    "\n",
    "    minioClient = Minio(s3_url, access_key=\"minio\", secret_key=\"minio123\", secure=secure)\n",
    "\n",
    "    with open(config_json, \"r\") as fp:\n",
    "        config = json.load(fp)\n",
    "\n",
    "    objects = minioClient.list_objects(bucket_name, prefix=f\"{config['region']}/hypodd/hypodd_\", recursive=True)\n",
    "\n",
    "    tmp_path = lambda x: os.path.join(\"/tmp/\", x)\n",
    "    for obj in objects:\n",
    "        print(obj._object_name)\n",
    "        minioClient.fget_object(bucket_name, obj._object_name, tmp_path(obj._object_name.split(\"/\")[-1]))\n",
    "\n",
    "    # tmp_ct_catalogs = sorted(glob(tmp_path(\"hypodd_ct_*.reloc\")))\n",
    "    hypodd_ct_catalogs = [tmp_path(f\"hypodd_ct_{i:03d}.reloc\") for i in index]\n",
    "    print(f\"cat {' '.join(hypodd_ct_catalogs)} > {tmp_path('hypodd_ct_catalog.txt')}\")\n",
    "    os.system(f\"cat {' '.join(hypodd_ct_catalogs)} > {tmp_path('hypodd_ct_catalog.txt')}\")\n",
    "    minioClient.fput_object(\n",
    "        bucket_name,\n",
    "        f\"{config['region']}/hypodd_ct_catalog.txt\",\n",
    "        tmp_path(\"hypodd_ct_catalog.txt\"),\n",
    "    )\n",
    "    os.system(f\"cat {tmp_path('hypodd_ct_catalog.txt')} > {catalog_ct}\")\n",
    "\n",
    "    # hypodd_cc_catalogs = sorted(glob(tmp_path(\"hypodd_cc_*.reloc\")))\n",
    "    hypodd_cc_catalogs = [tmp_path(f\"hypodd_cc_{i:03d}.reloc\") for i in index]\n",
    "    print(f\"cat {' '.join(hypodd_cc_catalogs)} > {tmp_path('hypodd_cc_catalog.txt')}\")\n",
    "    os.system(f\"cat {' '.join(hypodd_cc_catalogs)} > {tmp_path('hypodd_cc_catalog.txt')}\")\n",
    "    minioClient.fput_object(\n",
    "        bucket_name,\n",
    "        f\"{config['region']}/hypodd_cc_catalog.txt\",\n",
    "        tmp_path(\"hypodd_cc_catalog.txt\"),\n",
    "    )\n",
    "    os.system(f\"cat {tmp_path('hypodd_cc_catalog.txt')} > {catalog_cc}\")\n",
    "\n",
    "    return 0"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "merge_hypodd_op = comp.func_to_container_op(\n",
    "    merge_hypodd,\n",
    "    base_image=\"python:3.8\",\n",
    "    packages_to_install=[\"pandas\", \"tqdm\", \"minio\"],\n",
    ")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 8. Visulization"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "def visulization(\n",
    "    config_json: InputPath(\"json\"),\n",
    "    hypodd_catalog_ct: InputPath(str),\n",
    "    hypodd_catalog_cc: InputPath(str),\n",
    "    gamma_catalog: InputPath(str),\n",
    "    standard_catalog: InputPath(str),\n",
    "    data_path: str = \"./\",\n",
    "    bucket_name: str = \"catalogs\",\n",
    "    s3_url: str = \"minio-service:9000\",\n",
    "    secure: bool = True,\n",
    "):\n",
    "    import pandas as pd\n",
    "    import plotly.graph_objects as go\n",
    "    import numpy as np\n",
    "    import json\n",
    "    import os\n",
    "    from datetime import datetime\n",
    "    import matplotlib.pyplot as plt\n",
    "    import matplotlib.dates as mdates\n",
    "\n",
    "    with open(config_json, \"r\") as fp:\n",
    "        config = json.load(fp)\n",
    "\n",
    "    def plot3d(x, y, z, fig_name):\n",
    "        fig = go.Figure(\n",
    "            data=[\n",
    "                go.Scatter3d(\n",
    "                    x=x,\n",
    "                    y=y,\n",
    "                    z=z,\n",
    "                    mode=\"markers\",\n",
    "                    marker=dict(size=3.0, color=-z, cmin=-60, cmax=2, colorscale=\"Viridis\", opacity=0.8),\n",
    "                )\n",
    "            ],\n",
    "        )\n",
    "\n",
    "        fig.update_layout(\n",
    "            scene=dict(\n",
    "                xaxis=dict(\n",
    "                    nticks=4,\n",
    "                    range=config[\"xlim_degree\"],\n",
    "                ),\n",
    "                yaxis=dict(\n",
    "                    nticks=4,\n",
    "                    range=config[\"ylim_degree\"],\n",
    "                ),\n",
    "                zaxis=dict(\n",
    "                    nticks=4,\n",
    "                    # range=[z.max(), z.min()],\n",
    "                    range=[60, -2],\n",
    "                ),\n",
    "                #         aspectratio = dict(x=(xlim[1]-xlim[0])/2, y=(ylim[1]-ylim[0])/2, z=1),\n",
    "                aspectratio=dict(x=1, y=1, z=0.5),\n",
    "            ),\n",
    "            margin=dict(r=0, l=0, b=0, t=0),\n",
    "        )\n",
    "        fig.write_html(fig_name)\n",
    "\n",
    "    hypodd_ct_catalog = pd.read_csv(\n",
    "        hypodd_catalog_ct,\n",
    "        sep=\"\\s+\",\n",
    "        names=[\n",
    "            \"ID\",\n",
    "            \"LAT\",\n",
    "            \"LON\",\n",
    "            \"DEPTH\",\n",
    "            \"X\",\n",
    "            \"Y\",\n",
    "            \"Z\",\n",
    "            \"EX\",\n",
    "            \"EY\",\n",
    "            \"EZ\",\n",
    "            \"YR\",\n",
    "            \"MO\",\n",
    "            \"DY\",\n",
    "            \"HR\",\n",
    "            \"MI\",\n",
    "            \"SC\",\n",
    "            \"MAG\",\n",
    "            \"NCCP\",\n",
    "            \"NCCS\",\n",
    "            \"NCTP\",\n",
    "            \"NCTS\",\n",
    "            \"RCC\",\n",
    "            \"RCT\",\n",
    "            \"CID\",\n",
    "        ],\n",
    "    )\n",
    "    hypodd_ct_catalog[\"time\"] = hypodd_ct_catalog.apply(\n",
    "        lambda x: f'{x[\"YR\"]:04.0f}-{x[\"MO\"]:02.0f}-{x[\"DY\"]:02.0f}T{x[\"HR\"]:02.0f}:{x[\"MI\"]:02.0f}:{min(x[\"SC\"], 59.999):05.3f}',\n",
    "        axis=1,\n",
    "    )\n",
    "    hypodd_ct_catalog[\"magnitude\"] = hypodd_ct_catalog[\"MAG\"]\n",
    "    hypodd_ct_catalog[\"time\"] = hypodd_ct_catalog[\"time\"].apply(lambda x: datetime.strptime(x, \"%Y-%m-%dT%H:%M:%S.%f\"))\n",
    "    plot3d(\n",
    "        hypodd_ct_catalog[\"LON\"],\n",
    "        hypodd_ct_catalog[\"LAT\"],\n",
    "        hypodd_ct_catalog[\"DEPTH\"],\n",
    "        f\"{data_path}/hypodd_ct_catalog.html\",\n",
    "    )\n",
    "\n",
    "    gamma_catalog = pd.read_csv(gamma_catalog, parse_dates=[\"time\"])\n",
    "    gamma_catalog[\"depth_km\"] = gamma_catalog[\"depth(m)\"] / 1e3\n",
    "    plot3d(\n",
    "        gamma_catalog[\"longitude\"],\n",
    "        gamma_catalog[\"latitude\"],\n",
    "        gamma_catalog[\"depth_km\"],\n",
    "        f\"{data_path}/gamma_catalog.html\",\n",
    "    )\n",
    "\n",
    "    standard_catalog = pd.read_csv(standard_catalog, parse_dates=[\"time\"])\n",
    "    standard_catalog[\"depth_km\"] = standard_catalog[\"depth(m)\"] / 1e3\n",
    "    plot3d(\n",
    "        standard_catalog[\"longitude\"],\n",
    "        standard_catalog[\"latitude\"],\n",
    "        standard_catalog[\"depth_km\"],\n",
    "        f\"{data_path}/standard_catalog.html\",\n",
    "    )\n",
    "\n",
    "    ## histogram\n",
    "    bins = 30\n",
    "    config[\"starttime\"] = datetime.fromisoformat(config[\"starttime\"])\n",
    "    config[\"endtime\"] = datetime.fromisoformat(config[\"endtime\"])\n",
    "    fig, ax = plt.subplots()\n",
    "    ax.hist(gamma_catalog[\"time\"], range=(config[\"starttime\"], config[\"endtime\"]), bins=bins, edgecolor=\"k\", alpha=1.0, linewidth=0.5, label=f\"GaMMA: {len(gamma_catalog)}\")\n",
    "    ax.hist(hypodd_ct_catalog[\"time\"], range=(config[\"starttime\"], config[\"endtime\"]), bins=bins, edgecolor=\"k\", alpha=0.8, linewidth=0.5, label=f\"HypoDD: {len(hypodd_ct_catalog)}\")\n",
    "    ax.hist(standard_catalog[\"time\"], range=(config[\"starttime\"], config[\"endtime\"]), bins=bins, edgecolor=\"k\", alpha=0.6, linewidth=0.5, label=f\"Standard: {len(standard_catalog)}\")\n",
    "    # ax.set_xlabel(\"Date\")\n",
    "    ax.set_ylabel(\"Frequency\")\n",
    "    ax.autoscale(enable=True, axis='x', tight=True)\n",
    "    # ax.xaxis.set_major_formatter(mdates.DateFormatter('%Y-%m-%d'))\n",
    "    fig.autofmt_xdate()\n",
    "    ax.legend()\n",
    "    fig.savefig(f\"{data_path}/earthquake_frequency_time.png\", bbox_inches=\"tight\", dpi=300)\n",
    "    # fig.savefig(f\"{data_path}/earthquake_number.pdf\", bbox_inches=\"tight\")\n",
    "    plt.show()\n",
    "\n",
    "    fig, ax = plt.subplots()\n",
    "    xrange = (-1., max(standard_catalog[\"magnitude\"].max(), gamma_catalog[\"magnitude\"].max()))\n",
    "    ax.hist(gamma_catalog[\"magnitude\"], range=xrange, bins=bins, alpha=1.0,  edgecolor=\"k\", linewidth=0.5, label=f\"GaMMA: {len(gamma_catalog['magnitude'])}\")\n",
    "    ax.hist(hypodd_ct_catalog[\"magnitude\"], range=xrange, bins=bins, alpha=0.6,  edgecolor=\"k\", linewidth=0.5, label=f\"HypoDD: {len(hypodd_ct_catalog['magnitude'])}\")\n",
    "    ax.hist(standard_catalog[\"magnitude\"], range=xrange, bins=bins, alpha=0.6,  edgecolor=\"k\", linewidth=0.5, label=f\"Standard: {len(standard_catalog['magnitude'])}\")\n",
    "    ax.legend()\n",
    "    ax.autoscale(enable=True, axis='x', tight=True)\n",
    "    ax.set_xlabel(\"Magnitude\")\n",
    "    ax.set_ylabel(\"Frequency\")\n",
    "    ax.set_yscale('log')\n",
    "    fig.savefig(f\"{data_path}/earthquake_magnitude_frequency.png\", bbox_inches=\"tight\", dpi=300)\n",
    "    # fig.savefig(f\"{data_path}/earthquake_magnitude_frequency.pdf\", bbox_inches=\"tight\")\n",
    "    plt.show()\n",
    "\n",
    "    fig, ax = plt.subplots()\n",
    "    ax.plot(gamma_catalog[\"time\"], gamma_catalog[\"magnitude\"], '.', markersize=5.0, alpha=1.0, rasterized=True, label=f\"GaMMA: {len(gamma_catalog['magnitude'])}\")\n",
    "    ax.plot(hypodd_ct_catalog[\"time\"], hypodd_ct_catalog[\"magnitude\"], '.', markersize=5.0, alpha=1.0, rasterized=True, label=f\"HypoDD: {len(hypodd_ct_catalog['magnitude'])}\")\n",
    "    ax.plot(standard_catalog[\"time\"], standard_catalog[\"magnitude\"], '.', markersize=5.0, alpha=1.0, rasterized=True, label=f\"Standard: {len(standard_catalog['magnitude'])}\")\n",
    "    ax.set_xlim(config[\"starttime\"], config[\"endtime\"])\n",
    "    ax.set_ylabel(\"Magnitude\")\n",
    "    # ax.set_xlabel(\"Date\")\n",
    "    ax.set_ylim(bottom=-1)\n",
    "    ax.legend(markerscale=2)\n",
    "    ax.grid()\n",
    "    # ax.xaxis.set_major_formatter(mdates.DateFormatter('%Y-%m-%d'))\n",
    "    fig.autofmt_xdate()\n",
    "    fig.savefig(f\"{data_path}/earthquake_magnitude_time.png\", bbox_inches=\"tight\", dpi=300)\n",
    "    # fig.savefig(f\"{data_path}/earthquake_magnitude_time.pdf\", bbox_inches=\"tight\", dpi=300)\n",
    "    plt.show()\n",
    "\n",
    "    try:\n",
    "        hypodd_cc_catalog = pd.read_csv(\n",
    "            hypodd_catalog_cc,\n",
    "            sep=\"\\s+\",\n",
    "            names=[\n",
    "                \"ID\",\n",
    "                \"LAT\",\n",
    "                \"LON\",\n",
    "                \"DEPTH\",\n",
    "                \"X\",\n",
    "                \"Y\",\n",
    "                \"Z\",\n",
    "                \"EX\",\n",
    "                \"EY\",\n",
    "                \"EZ\",\n",
    "                \"YR\",\n",
    "                \"MO\",\n",
    "                \"DY\",\n",
    "                \"HR\",\n",
    "                \"MI\",\n",
    "                \"SC\",\n",
    "                \"MAG\",\n",
    "                \"NCCP\",\n",
    "                \"NCCS\",\n",
    "                \"NCTP\",\n",
    "                \"NCTS\",\n",
    "                \"RCC\",\n",
    "                \"RCT\",\n",
    "                \"CID\",\n",
    "            ],\n",
    "        )\n",
    "        hypodd_cc_catalog[\"time\"] = hypodd_cc_catalog.apply(\n",
    "            lambda x: f'{x[\"YR\"]:04.0f}-{x[\"MO\"]:02.0f}-{x[\"DY\"]:02.0f}T{x[\"HR\"]:02.0f}:{x[\"MI\"]:02.0f}:{min(x[\"SC\"], 59.999):05.3f}',\n",
    "            axis=1,\n",
    "        )\n",
    "        hypodd_cc_catalog[\"time\"] = hypodd_cc_catalog[\"time\"].apply(\n",
    "            lambda x: datetime.strptime(x, \"%Y-%m-%dT%H:%M:%S.%f\")\n",
    "        )\n",
    "        plot3d(\n",
    "            hypodd_cc_catalog[\"LON\"],\n",
    "            hypodd_cc_catalog[\"LAT\"],\n",
    "            hypodd_cc_catalog[\"DEPTH\"],\n",
    "            f\"{data_path}/hypodd_cc_catalog.html\",\n",
    "        )\n",
    "    except Exception as err:\n",
    "        print(f\"{err}\")\n",
    "\n",
    "    ## upload to s3 bucket\n",
    "    try:\n",
    "        from minio import Minio\n",
    "\n",
    "        minioClient = Minio(s3_url, access_key=\"minio\", secret_key=\"minio123\", secure=secure)\n",
    "        if not minioClient.bucket_exists(bucket_name):\n",
    "            minioClient.make_bucket(bucket_name)\n",
    "\n",
    "        minioClient.fput_object(\n",
    "            bucket_name,\n",
    "            f\"{config['region']}/hypodd_ct_catalog.html\",\n",
    "            f\"{data_path}/hypodd_ct_catalog.html\",\n",
    "        )\n",
    "\n",
    "        minioClient.fput_object(\n",
    "            bucket_name,\n",
    "            f\"{config['region']}/gamma_catalog.html\",\n",
    "            f\"{data_path}/gamma_catalog.html\",\n",
    "        )\n",
    "        minioClient.fput_object(\n",
    "            bucket_name,\n",
    "            f\"{config['region']}/standard_catalog.html\",\n",
    "            f\"{data_path}/standard_catalog.html\",\n",
    "        )\n",
    "        minioClient.fput_object(\n",
    "            bucket_name,\n",
    "            f\"{config['region']}/earthquake_frequency_time.png\",\n",
    "            f\"{data_path}/earthquake_frequency_time.png\",\n",
    "        )\n",
    "        minioClient.fput_object(\n",
    "            bucket_name,\n",
    "            f\"{config['region']}/earthquake_magnitude_frequency.png\",\n",
    "            f\"{data_path}/earthquake_magnitude_frequency.png\",\n",
    "        )\n",
    "        minioClient.fput_object(\n",
    "            bucket_name,\n",
    "            f\"{config['region']}/earthquake_magnitude_time.png\",\n",
    "            f\"{data_path}/earthquake_magnitude_time.png\",\n",
    "        )\n",
    "        if os.path.exists(f\"{data_path}/hypodd_cc_catalog.html\"):\n",
    "            minioClient.fput_object(\n",
    "                bucket_name,\n",
    "                f\"{config['region']}/hypodd_cc_catalog.html\",\n",
    "                f\"{data_path}/hypodd_cc_catalog.html\",\n",
    "            )\n",
    "\n",
    "    except Exception as err:\n",
    "        print(f\"ERROR: can not access minio service! \\n{err}\")\n",
    "        pass"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[Errno 2] No such file or directory: 'Demo/hypodd_cc_catalog.txt'\n",
      "ERROR: can not access minio service! \n",
      "HTTPSConnectionPool(host='minio-service', port=9000): Max retries exceeded with url: /catalogs?location= (Caused by NewConnectionError('<urllib3.connection.HTTPSConnection object at 0x7f3ca446b070>: Failed to establish a new connection: [Errno -2] Name or service not known'))\n"
     ]
    }
   ],
   "source": [
    "if run_local:\n",
    "    visulization(\n",
    "        root_dir(\"config.json\"),\n",
    "        root_dir(\"hypodd_ct_catalog.txt\"),\n",
    "        root_dir(\"hypodd_cc_catalog.txt\"),\n",
    "        root_dir(\"gamma_catalog.csv\"),\n",
    "        root_dir(\"standard_catalog.csv\"),\n",
    "        root_dir(\"\"),\n",
    "    )"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "visulization_op = comp.func_to_container_op(\n",
    "    visulization,\n",
    "    base_image=\"python:3.8\",\n",
    "    packages_to_install=[\"matplotlib\", \"pandas\", \"plotly\", \"minio\"],\n",
    ")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "ename": "ConnectionError",
     "evalue": "HTTPConnectionPool(host='192.168.49.2', port=8080): Max retries exceeded with url: /apis/v1beta1/pipelines (Caused by NewConnectionError('<urllib3.connection.HTTPConnection object at 0x7f16c0177a60>: Failed to establish a new connection: [Errno 110] Connection timed out'))",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mTimeoutError\u001b[0m                              Traceback (most recent call last)",
      "File \u001b[0;32m~/miniconda3/envs/quakeflow/lib/python3.8/site-packages/urllib3/connection.py:174\u001b[0m, in \u001b[0;36mHTTPConnection._new_conn\u001b[0;34m(self)\u001b[0m\n\u001b[1;32m    173\u001b[0m \u001b[38;5;28;01mtry\u001b[39;00m:\n\u001b[0;32m--> 174\u001b[0m     conn \u001b[38;5;241m=\u001b[39m \u001b[43mconnection\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mcreate_connection\u001b[49m\u001b[43m(\u001b[49m\n\u001b[1;32m    175\u001b[0m \u001b[43m        \u001b[49m\u001b[43m(\u001b[49m\u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43m_dns_host\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mport\u001b[49m\u001b[43m)\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mtimeout\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[43mextra_kw\u001b[49m\n\u001b[1;32m    176\u001b[0m \u001b[43m    \u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m    178\u001b[0m \u001b[38;5;28;01mexcept\u001b[39;00m SocketTimeout:\n",
      "File \u001b[0;32m~/miniconda3/envs/quakeflow/lib/python3.8/site-packages/urllib3/util/connection.py:95\u001b[0m, in \u001b[0;36mcreate_connection\u001b[0;34m(address, timeout, source_address, socket_options)\u001b[0m\n\u001b[1;32m     94\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m err \u001b[38;5;129;01mis\u001b[39;00m \u001b[38;5;129;01mnot\u001b[39;00m \u001b[38;5;28;01mNone\u001b[39;00m:\n\u001b[0;32m---> 95\u001b[0m     \u001b[38;5;28;01mraise\u001b[39;00m err\n\u001b[1;32m     97\u001b[0m \u001b[38;5;28;01mraise\u001b[39;00m socket\u001b[38;5;241m.\u001b[39merror(\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mgetaddrinfo returns an empty list\u001b[39m\u001b[38;5;124m\"\u001b[39m)\n",
      "File \u001b[0;32m~/miniconda3/envs/quakeflow/lib/python3.8/site-packages/urllib3/util/connection.py:85\u001b[0m, in \u001b[0;36mcreate_connection\u001b[0;34m(address, timeout, source_address, socket_options)\u001b[0m\n\u001b[1;32m     84\u001b[0m     sock\u001b[38;5;241m.\u001b[39mbind(source_address)\n\u001b[0;32m---> 85\u001b[0m \u001b[43msock\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mconnect\u001b[49m\u001b[43m(\u001b[49m\u001b[43msa\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m     86\u001b[0m \u001b[38;5;28;01mreturn\u001b[39;00m sock\n",
      "\u001b[0;31mTimeoutError\u001b[0m: [Errno 110] Connection timed out",
      "\nDuring handling of the above exception, another exception occurred:\n",
      "\u001b[0;31mNewConnectionError\u001b[0m                        Traceback (most recent call last)",
      "File \u001b[0;32m~/miniconda3/envs/quakeflow/lib/python3.8/site-packages/urllib3/connectionpool.py:716\u001b[0m, in \u001b[0;36mHTTPConnectionPool.urlopen\u001b[0;34m(self, method, url, body, headers, retries, redirect, assert_same_host, timeout, pool_timeout, release_conn, chunked, body_pos, **response_kw)\u001b[0m\n\u001b[1;32m    715\u001b[0m \u001b[38;5;66;03m# Make the request on the httplib connection object.\u001b[39;00m\n\u001b[0;32m--> 716\u001b[0m httplib_response \u001b[38;5;241m=\u001b[39m \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43m_make_request\u001b[49m\u001b[43m(\u001b[49m\n\u001b[1;32m    717\u001b[0m \u001b[43m    \u001b[49m\u001b[43mconn\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    718\u001b[0m \u001b[43m    \u001b[49m\u001b[43mmethod\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    719\u001b[0m \u001b[43m    \u001b[49m\u001b[43murl\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    720\u001b[0m \u001b[43m    \u001b[49m\u001b[43mtimeout\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mtimeout_obj\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    721\u001b[0m \u001b[43m    \u001b[49m\u001b[43mbody\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mbody\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    722\u001b[0m \u001b[43m    \u001b[49m\u001b[43mheaders\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mheaders\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    723\u001b[0m \u001b[43m    \u001b[49m\u001b[43mchunked\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mchunked\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    724\u001b[0m \u001b[43m\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m    726\u001b[0m \u001b[38;5;66;03m# If we're going to release the connection in ``finally:``, then\u001b[39;00m\n\u001b[1;32m    727\u001b[0m \u001b[38;5;66;03m# the response doesn't need to know about the connection. Otherwise\u001b[39;00m\n\u001b[1;32m    728\u001b[0m \u001b[38;5;66;03m# it will also try to release it and we'll have a double-release\u001b[39;00m\n\u001b[1;32m    729\u001b[0m \u001b[38;5;66;03m# mess.\u001b[39;00m\n",
      "File \u001b[0;32m~/miniconda3/envs/quakeflow/lib/python3.8/site-packages/urllib3/connectionpool.py:416\u001b[0m, in \u001b[0;36mHTTPConnectionPool._make_request\u001b[0;34m(self, conn, method, url, timeout, chunked, **httplib_request_kw)\u001b[0m\n\u001b[1;32m    415\u001b[0m     \u001b[38;5;28;01melse\u001b[39;00m:\n\u001b[0;32m--> 416\u001b[0m         \u001b[43mconn\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mrequest\u001b[49m\u001b[43m(\u001b[49m\u001b[43mmethod\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43murl\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[43mhttplib_request_kw\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m    418\u001b[0m \u001b[38;5;66;03m# We are swallowing BrokenPipeError (errno.EPIPE) since the server is\u001b[39;00m\n\u001b[1;32m    419\u001b[0m \u001b[38;5;66;03m# legitimately able to close the connection after sending a valid response.\u001b[39;00m\n\u001b[1;32m    420\u001b[0m \u001b[38;5;66;03m# With this behaviour, the received response is still readable.\u001b[39;00m\n",
      "File \u001b[0;32m~/miniconda3/envs/quakeflow/lib/python3.8/site-packages/urllib3/connection.py:244\u001b[0m, in \u001b[0;36mHTTPConnection.request\u001b[0;34m(self, method, url, body, headers)\u001b[0m\n\u001b[1;32m    243\u001b[0m     headers[\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mUser-Agent\u001b[39m\u001b[38;5;124m\"\u001b[39m] \u001b[38;5;241m=\u001b[39m _get_default_user_agent()\n\u001b[0;32m--> 244\u001b[0m \u001b[38;5;28;43msuper\u001b[39;49m\u001b[43m(\u001b[49m\u001b[43mHTTPConnection\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;28;43mself\u001b[39;49m\u001b[43m)\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mrequest\u001b[49m\u001b[43m(\u001b[49m\u001b[43mmethod\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43murl\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mbody\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mbody\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mheaders\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mheaders\u001b[49m\u001b[43m)\u001b[49m\n",
      "File \u001b[0;32m~/miniconda3/envs/quakeflow/lib/python3.8/http/client.py:1256\u001b[0m, in \u001b[0;36mHTTPConnection.request\u001b[0;34m(self, method, url, body, headers, encode_chunked)\u001b[0m\n\u001b[1;32m   1255\u001b[0m \u001b[38;5;250m\u001b[39m\u001b[38;5;124;03m\"\"\"Send a complete request to the server.\"\"\"\u001b[39;00m\n\u001b[0;32m-> 1256\u001b[0m \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43m_send_request\u001b[49m\u001b[43m(\u001b[49m\u001b[43mmethod\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43murl\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mbody\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mheaders\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mencode_chunked\u001b[49m\u001b[43m)\u001b[49m\n",
      "File \u001b[0;32m~/miniconda3/envs/quakeflow/lib/python3.8/http/client.py:1302\u001b[0m, in \u001b[0;36mHTTPConnection._send_request\u001b[0;34m(self, method, url, body, headers, encode_chunked)\u001b[0m\n\u001b[1;32m   1301\u001b[0m     body \u001b[38;5;241m=\u001b[39m _encode(body, \u001b[38;5;124m'\u001b[39m\u001b[38;5;124mbody\u001b[39m\u001b[38;5;124m'\u001b[39m)\n\u001b[0;32m-> 1302\u001b[0m \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mendheaders\u001b[49m\u001b[43m(\u001b[49m\u001b[43mbody\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mencode_chunked\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mencode_chunked\u001b[49m\u001b[43m)\u001b[49m\n",
      "File \u001b[0;32m~/miniconda3/envs/quakeflow/lib/python3.8/http/client.py:1251\u001b[0m, in \u001b[0;36mHTTPConnection.endheaders\u001b[0;34m(self, message_body, encode_chunked)\u001b[0m\n\u001b[1;32m   1250\u001b[0m     \u001b[38;5;28;01mraise\u001b[39;00m CannotSendHeader()\n\u001b[0;32m-> 1251\u001b[0m \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43m_send_output\u001b[49m\u001b[43m(\u001b[49m\u001b[43mmessage_body\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mencode_chunked\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mencode_chunked\u001b[49m\u001b[43m)\u001b[49m\n",
      "File \u001b[0;32m~/miniconda3/envs/quakeflow/lib/python3.8/http/client.py:1011\u001b[0m, in \u001b[0;36mHTTPConnection._send_output\u001b[0;34m(self, message_body, encode_chunked)\u001b[0m\n\u001b[1;32m   1010\u001b[0m \u001b[38;5;28;01mdel\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_buffer[:]\n\u001b[0;32m-> 1011\u001b[0m \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43msend\u001b[49m\u001b[43m(\u001b[49m\u001b[43mmsg\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m   1013\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m message_body \u001b[38;5;129;01mis\u001b[39;00m \u001b[38;5;129;01mnot\u001b[39;00m \u001b[38;5;28;01mNone\u001b[39;00m:\n\u001b[1;32m   1014\u001b[0m \n\u001b[1;32m   1015\u001b[0m     \u001b[38;5;66;03m# create a consistent interface to message_body\u001b[39;00m\n",
      "File \u001b[0;32m~/miniconda3/envs/quakeflow/lib/python3.8/http/client.py:951\u001b[0m, in \u001b[0;36mHTTPConnection.send\u001b[0;34m(self, data)\u001b[0m\n\u001b[1;32m    950\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mauto_open:\n\u001b[0;32m--> 951\u001b[0m     \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mconnect\u001b[49m\u001b[43m(\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m    952\u001b[0m \u001b[38;5;28;01melse\u001b[39;00m:\n",
      "File \u001b[0;32m~/miniconda3/envs/quakeflow/lib/python3.8/site-packages/urllib3/connection.py:205\u001b[0m, in \u001b[0;36mHTTPConnection.connect\u001b[0;34m(self)\u001b[0m\n\u001b[1;32m    204\u001b[0m \u001b[38;5;28;01mdef\u001b[39;00m \u001b[38;5;21mconnect\u001b[39m(\u001b[38;5;28mself\u001b[39m):\n\u001b[0;32m--> 205\u001b[0m     conn \u001b[38;5;241m=\u001b[39m \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43m_new_conn\u001b[49m\u001b[43m(\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m    206\u001b[0m     \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_prepare_conn(conn)\n",
      "File \u001b[0;32m~/miniconda3/envs/quakeflow/lib/python3.8/site-packages/urllib3/connection.py:186\u001b[0m, in \u001b[0;36mHTTPConnection._new_conn\u001b[0;34m(self)\u001b[0m\n\u001b[1;32m    185\u001b[0m \u001b[38;5;28;01mexcept\u001b[39;00m SocketError \u001b[38;5;28;01mas\u001b[39;00m e:\n\u001b[0;32m--> 186\u001b[0m     \u001b[38;5;28;01mraise\u001b[39;00m NewConnectionError(\n\u001b[1;32m    187\u001b[0m         \u001b[38;5;28mself\u001b[39m, \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mFailed to establish a new connection: \u001b[39m\u001b[38;5;132;01m%s\u001b[39;00m\u001b[38;5;124m\"\u001b[39m \u001b[38;5;241m%\u001b[39m e\n\u001b[1;32m    188\u001b[0m     )\n\u001b[1;32m    190\u001b[0m \u001b[38;5;28;01mreturn\u001b[39;00m conn\n",
      "\u001b[0;31mNewConnectionError\u001b[0m: <urllib3.connection.HTTPConnection object at 0x7f16c0177a60>: Failed to establish a new connection: [Errno 110] Connection timed out",
      "\nDuring handling of the above exception, another exception occurred:\n",
      "\u001b[0;31mMaxRetryError\u001b[0m                             Traceback (most recent call last)",
      "File \u001b[0;32m~/miniconda3/envs/quakeflow/lib/python3.8/site-packages/requests/adapters.py:667\u001b[0m, in \u001b[0;36mHTTPAdapter.send\u001b[0;34m(self, request, stream, timeout, verify, cert, proxies)\u001b[0m\n\u001b[1;32m    666\u001b[0m \u001b[38;5;28;01mtry\u001b[39;00m:\n\u001b[0;32m--> 667\u001b[0m     resp \u001b[38;5;241m=\u001b[39m \u001b[43mconn\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43murlopen\u001b[49m\u001b[43m(\u001b[49m\n\u001b[1;32m    668\u001b[0m \u001b[43m        \u001b[49m\u001b[43mmethod\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mrequest\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mmethod\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    669\u001b[0m \u001b[43m        \u001b[49m\u001b[43murl\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43murl\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    670\u001b[0m \u001b[43m        \u001b[49m\u001b[43mbody\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mrequest\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mbody\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    671\u001b[0m \u001b[43m        \u001b[49m\u001b[43mheaders\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mrequest\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mheaders\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    672\u001b[0m \u001b[43m        \u001b[49m\u001b[43mredirect\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[38;5;28;43;01mFalse\u001b[39;49;00m\u001b[43m,\u001b[49m\n\u001b[1;32m    673\u001b[0m \u001b[43m        \u001b[49m\u001b[43massert_same_host\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[38;5;28;43;01mFalse\u001b[39;49;00m\u001b[43m,\u001b[49m\n\u001b[1;32m    674\u001b[0m \u001b[43m        \u001b[49m\u001b[43mpreload_content\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[38;5;28;43;01mFalse\u001b[39;49;00m\u001b[43m,\u001b[49m\n\u001b[1;32m    675\u001b[0m \u001b[43m        \u001b[49m\u001b[43mdecode_content\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[38;5;28;43;01mFalse\u001b[39;49;00m\u001b[43m,\u001b[49m\n\u001b[1;32m    676\u001b[0m \u001b[43m        \u001b[49m\u001b[43mretries\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mmax_retries\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    677\u001b[0m \u001b[43m        \u001b[49m\u001b[43mtimeout\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mtimeout\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    678\u001b[0m \u001b[43m        \u001b[49m\u001b[43mchunked\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mchunked\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    679\u001b[0m \u001b[43m    \u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m    681\u001b[0m \u001b[38;5;28;01mexcept\u001b[39;00m (ProtocolError, \u001b[38;5;167;01mOSError\u001b[39;00m) \u001b[38;5;28;01mas\u001b[39;00m err:\n",
      "File \u001b[0;32m~/miniconda3/envs/quakeflow/lib/python3.8/site-packages/urllib3/connectionpool.py:802\u001b[0m, in \u001b[0;36mHTTPConnectionPool.urlopen\u001b[0;34m(self, method, url, body, headers, retries, redirect, assert_same_host, timeout, pool_timeout, release_conn, chunked, body_pos, **response_kw)\u001b[0m\n\u001b[1;32m    800\u001b[0m     e \u001b[38;5;241m=\u001b[39m ProtocolError(\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mConnection aborted.\u001b[39m\u001b[38;5;124m\"\u001b[39m, e)\n\u001b[0;32m--> 802\u001b[0m retries \u001b[38;5;241m=\u001b[39m \u001b[43mretries\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mincrement\u001b[49m\u001b[43m(\u001b[49m\n\u001b[1;32m    803\u001b[0m \u001b[43m    \u001b[49m\u001b[43mmethod\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43murl\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43merror\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43me\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43m_pool\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[38;5;28;43mself\u001b[39;49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43m_stacktrace\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43msys\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mexc_info\u001b[49m\u001b[43m(\u001b[49m\u001b[43m)\u001b[49m\u001b[43m[\u001b[49m\u001b[38;5;241;43m2\u001b[39;49m\u001b[43m]\u001b[49m\n\u001b[1;32m    804\u001b[0m \u001b[43m\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m    805\u001b[0m retries\u001b[38;5;241m.\u001b[39msleep()\n",
      "File \u001b[0;32m~/miniconda3/envs/quakeflow/lib/python3.8/site-packages/urllib3/util/retry.py:594\u001b[0m, in \u001b[0;36mRetry.increment\u001b[0;34m(self, method, url, response, error, _pool, _stacktrace)\u001b[0m\n\u001b[1;32m    593\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m new_retry\u001b[38;5;241m.\u001b[39mis_exhausted():\n\u001b[0;32m--> 594\u001b[0m     \u001b[38;5;28;01mraise\u001b[39;00m MaxRetryError(_pool, url, error \u001b[38;5;129;01mor\u001b[39;00m ResponseError(cause))\n\u001b[1;32m    596\u001b[0m log\u001b[38;5;241m.\u001b[39mdebug(\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mIncremented Retry for (url=\u001b[39m\u001b[38;5;124m'\u001b[39m\u001b[38;5;132;01m%s\u001b[39;00m\u001b[38;5;124m'\u001b[39m\u001b[38;5;124m): \u001b[39m\u001b[38;5;132;01m%r\u001b[39;00m\u001b[38;5;124m\"\u001b[39m, url, new_retry)\n",
      "\u001b[0;31mMaxRetryError\u001b[0m: HTTPConnectionPool(host='192.168.49.2', port=8080): Max retries exceeded with url: /apis/v1beta1/pipelines (Caused by NewConnectionError('<urllib3.connection.HTTPConnection object at 0x7f16c0177a60>: Failed to establish a new connection: [Errno 110] Connection timed out'))",
      "\nDuring handling of the above exception, another exception occurred:\n",
      "\u001b[0;31mConnectionError\u001b[0m                           Traceback (most recent call last)",
      "Cell \u001b[0;32mIn[1], line 7\u001b[0m\n\u001b[1;32m      4\u001b[0m headers \u001b[38;5;241m=\u001b[39m {\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mContent-Type\u001b[39m\u001b[38;5;124m\"\u001b[39m: \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mapplication/json\u001b[39m\u001b[38;5;124m\"\u001b[39m}\n\u001b[1;32m      5\u001b[0m data \u001b[38;5;241m=\u001b[39m { \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124msome_key\u001b[39m\u001b[38;5;124m\"\u001b[39m: \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124msome_value\u001b[39m\u001b[38;5;124m\"\u001b[39m }  \u001b[38;5;66;03m# 必要な JSON データを設定\u001b[39;00m\n\u001b[0;32m----> 7\u001b[0m response \u001b[38;5;241m=\u001b[39m \u001b[43mrequests\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mpost\u001b[49m\u001b[43m(\u001b[49m\u001b[43murl\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mjson\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mdata\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mheaders\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mheaders\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m      8\u001b[0m \u001b[38;5;28mprint\u001b[39m(response\u001b[38;5;241m.\u001b[39mstatus_code, response\u001b[38;5;241m.\u001b[39mtext)\n",
      "File \u001b[0;32m~/miniconda3/envs/quakeflow/lib/python3.8/site-packages/requests/api.py:115\u001b[0m, in \u001b[0;36mpost\u001b[0;34m(url, data, json, **kwargs)\u001b[0m\n\u001b[1;32m    103\u001b[0m \u001b[38;5;28;01mdef\u001b[39;00m \u001b[38;5;21mpost\u001b[39m(url, data\u001b[38;5;241m=\u001b[39m\u001b[38;5;28;01mNone\u001b[39;00m, json\u001b[38;5;241m=\u001b[39m\u001b[38;5;28;01mNone\u001b[39;00m, \u001b[38;5;241m*\u001b[39m\u001b[38;5;241m*\u001b[39mkwargs):\n\u001b[1;32m    104\u001b[0m \u001b[38;5;250m    \u001b[39m\u001b[38;5;124mr\u001b[39m\u001b[38;5;124;03m\"\"\"Sends a POST request.\u001b[39;00m\n\u001b[1;32m    105\u001b[0m \n\u001b[1;32m    106\u001b[0m \u001b[38;5;124;03m    :param url: URL for the new :class:`Request` object.\u001b[39;00m\n\u001b[0;32m   (...)\u001b[0m\n\u001b[1;32m    112\u001b[0m \u001b[38;5;124;03m    :rtype: requests.Response\u001b[39;00m\n\u001b[1;32m    113\u001b[0m \u001b[38;5;124;03m    \"\"\"\u001b[39;00m\n\u001b[0;32m--> 115\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[43mrequest\u001b[49m\u001b[43m(\u001b[49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[38;5;124;43mpost\u001b[39;49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43murl\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mdata\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mdata\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mjson\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mjson\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[43mkwargs\u001b[49m\u001b[43m)\u001b[49m\n",
      "File \u001b[0;32m~/miniconda3/envs/quakeflow/lib/python3.8/site-packages/requests/api.py:59\u001b[0m, in \u001b[0;36mrequest\u001b[0;34m(method, url, **kwargs)\u001b[0m\n\u001b[1;32m     55\u001b[0m \u001b[38;5;66;03m# By using the 'with' statement we are sure the session is closed, thus we\u001b[39;00m\n\u001b[1;32m     56\u001b[0m \u001b[38;5;66;03m# avoid leaving sockets open which can trigger a ResourceWarning in some\u001b[39;00m\n\u001b[1;32m     57\u001b[0m \u001b[38;5;66;03m# cases, and look like a memory leak in others.\u001b[39;00m\n\u001b[1;32m     58\u001b[0m \u001b[38;5;28;01mwith\u001b[39;00m sessions\u001b[38;5;241m.\u001b[39mSession() \u001b[38;5;28;01mas\u001b[39;00m session:\n\u001b[0;32m---> 59\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[43msession\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mrequest\u001b[49m\u001b[43m(\u001b[49m\u001b[43mmethod\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mmethod\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43murl\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43murl\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[43mkwargs\u001b[49m\u001b[43m)\u001b[49m\n",
      "File \u001b[0;32m~/miniconda3/envs/quakeflow/lib/python3.8/site-packages/requests/sessions.py:589\u001b[0m, in \u001b[0;36mSession.request\u001b[0;34m(self, method, url, params, data, headers, cookies, files, auth, timeout, allow_redirects, proxies, hooks, stream, verify, cert, json)\u001b[0m\n\u001b[1;32m    584\u001b[0m send_kwargs \u001b[38;5;241m=\u001b[39m {\n\u001b[1;32m    585\u001b[0m     \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mtimeout\u001b[39m\u001b[38;5;124m\"\u001b[39m: timeout,\n\u001b[1;32m    586\u001b[0m     \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mallow_redirects\u001b[39m\u001b[38;5;124m\"\u001b[39m: allow_redirects,\n\u001b[1;32m    587\u001b[0m }\n\u001b[1;32m    588\u001b[0m send_kwargs\u001b[38;5;241m.\u001b[39mupdate(settings)\n\u001b[0;32m--> 589\u001b[0m resp \u001b[38;5;241m=\u001b[39m \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43msend\u001b[49m\u001b[43m(\u001b[49m\u001b[43mprep\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[43msend_kwargs\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m    591\u001b[0m \u001b[38;5;28;01mreturn\u001b[39;00m resp\n",
      "File \u001b[0;32m~/miniconda3/envs/quakeflow/lib/python3.8/site-packages/requests/sessions.py:703\u001b[0m, in \u001b[0;36mSession.send\u001b[0;34m(self, request, **kwargs)\u001b[0m\n\u001b[1;32m    700\u001b[0m start \u001b[38;5;241m=\u001b[39m preferred_clock()\n\u001b[1;32m    702\u001b[0m \u001b[38;5;66;03m# Send the request\u001b[39;00m\n\u001b[0;32m--> 703\u001b[0m r \u001b[38;5;241m=\u001b[39m \u001b[43madapter\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43msend\u001b[49m\u001b[43m(\u001b[49m\u001b[43mrequest\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[43mkwargs\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m    705\u001b[0m \u001b[38;5;66;03m# Total elapsed time of the request (approximately)\u001b[39;00m\n\u001b[1;32m    706\u001b[0m elapsed \u001b[38;5;241m=\u001b[39m preferred_clock() \u001b[38;5;241m-\u001b[39m start\n",
      "File \u001b[0;32m~/miniconda3/envs/quakeflow/lib/python3.8/site-packages/requests/adapters.py:700\u001b[0m, in \u001b[0;36mHTTPAdapter.send\u001b[0;34m(self, request, stream, timeout, verify, cert, proxies)\u001b[0m\n\u001b[1;32m    696\u001b[0m     \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;28misinstance\u001b[39m(e\u001b[38;5;241m.\u001b[39mreason, _SSLError):\n\u001b[1;32m    697\u001b[0m         \u001b[38;5;66;03m# This branch is for urllib3 v1.22 and later.\u001b[39;00m\n\u001b[1;32m    698\u001b[0m         \u001b[38;5;28;01mraise\u001b[39;00m SSLError(e, request\u001b[38;5;241m=\u001b[39mrequest)\n\u001b[0;32m--> 700\u001b[0m     \u001b[38;5;28;01mraise\u001b[39;00m \u001b[38;5;167;01mConnectionError\u001b[39;00m(e, request\u001b[38;5;241m=\u001b[39mrequest)\n\u001b[1;32m    702\u001b[0m \u001b[38;5;28;01mexcept\u001b[39;00m ClosedPoolError \u001b[38;5;28;01mas\u001b[39;00m e:\n\u001b[1;32m    703\u001b[0m     \u001b[38;5;28;01mraise\u001b[39;00m \u001b[38;5;167;01mConnectionError\u001b[39;00m(e, request\u001b[38;5;241m=\u001b[39mrequest)\n",
      "\u001b[0;31mConnectionError\u001b[0m: HTTPConnectionPool(host='192.168.49.2', port=8080): Max retries exceeded with url: /apis/v1beta1/pipelines (Caused by NewConnectionError('<urllib3.connection.HTTPConnection object at 0x7f16c0177a60>: Failed to establish a new connection: [Errno 110] Connection timed out'))"
     ]
    }
   ],
   "source": [
    "import requests\n",
    "\n",
    "url = \"http://172.17.0.2:8080/apis/v1beta1/pipelines\"\n",
    "headers = {\"Content-Type\": \"application/json\"}\n",
    "data = { \"some_key\": \"some_value\" }  # 必要な JSON データを設定\n",
    "\n",
    "response = requests.post(url, json=data, headers=headers)\n",
    "print(response.status_code, response.text)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 9. Parallel process on cloud"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "@dsl.pipeline(name=\"QuakeFlow\", description=\"\")\n",
    "def quakeflow_pipeline(\n",
    "    data_path: str = \"/tmp/\",\n",
    "    num_parallel=0,\n",
    "    bucket_catalog: str = \"catalogs\",\n",
    "    s3_url: str = \"minio-service:9000\",\n",
    "    secure: bool = False,\n",
    "):\n",
    "\n",
    "    config = config_op(\n",
    "        region_name, num_parallel, bucket_name=f\"catalogs\", s3_url=s3_url, secure=secure\n",
    "    ).add_node_selector_constraint(\"cloud.google.com/gke-nodepool\", \"spot-2g\")\n",
    "\n",
    "    events = (\n",
    "        download_events_op(config.outputs[\"config_json\"], bucket_name=f\"catalogs\", s3_url=s3_url, secure=secure)\n",
    "        .add_node_selector_constraint(\"cloud.google.com/gke-nodepool\", \"spot-2g\")\n",
    "        .set_retry(3)\n",
    "        .set_memory_request(\"1G\")\n",
    "        .set_display_name(\"Download Events\")\n",
    "    )\n",
    "\n",
    "    stations = (\n",
    "        download_stations_op(config.outputs[\"config_json\"], bucket_name=f\"catalogs\", s3_url=s3_url, secure=secure)\n",
    "        .add_node_selector_constraint(\"cloud.google.com/gke-nodepool\", \"spot-2g\")\n",
    "        .set_retry(3)\n",
    "        .set_display_name(\"Download Stations\")\n",
    "    )\n",
    "\n",
    "    with kfp.dsl.ParallelFor(config.outputs[\"output\"]) as i:\n",
    "\n",
    "        vop_ = dsl.VolumeOp(\n",
    "            name=f\"Create volume {region_name}\",\n",
    "            resource_name=f\"data-volume-{str(i)}\",\n",
    "            size=\"100Gi\",\n",
    "            modes=dsl.VOLUME_MODE_RWO,\n",
    "        )\n",
    "        # ).set_retry(3)\n",
    "\n",
    "        download_op_ = (\n",
    "            download_waveform_op(\n",
    "                i,\n",
    "                config.outputs[\"index_json\"],\n",
    "                config.outputs[\"config_json\"],\n",
    "                config.outputs[\"datetime_json\"],\n",
    "                stations.outputs[\"station_pkl\"],\n",
    "                data_path=data_path,\n",
    "                bucket_name=f\"waveforms\",\n",
    "                s3_url=s3_url,\n",
    "                secure=secure,\n",
    "            )\n",
    "            .add_pvolumes({data_path: vop_.volume})\n",
    "            .set_cpu_request(\"700m\")\n",
    "            # .set_cpu_request(\"350m\")\n",
    "            .add_node_selector_constraint(\"cloud.google.com/gke-nodepool\", \"spot-2g\")\n",
    "            .set_retry(5)\n",
    "            .set_display_name(\"Download Waveforms\")\n",
    "        )\n",
    "        download_op_.execution_options.caching_strategy.max_cache_staleness = \"P30D\"\n",
    "\n",
    "        phasenet_op_ = (\n",
    "            phasenet_op(\n",
    "                download_op_.outputs[\"Output\"],\n",
    "                download_op_.outputs[\"fname_csv\"],\n",
    "                stations.outputs[\"station_json\"],\n",
    "            )\n",
    "            .add_pvolumes({data_path: download_op_.pvolume})\n",
    "            .set_memory_request(\"9G\")\n",
    "            .set_retry(5)\n",
    "            .set_display_name(\"PhaseNet Picking\")\n",
    "        )\n",
    "        phasenet_op_.execution_options.caching_strategy.max_cache_staleness = \"P30D\"\n",
    "        phasenet_op_.set_image_pull_policy(\"Always\")\n",
    "\n",
    "        gamma_op_ = (\n",
    "            gamma_op(\n",
    "                i,\n",
    "                config.outputs[\"index_json\"],\n",
    "                config.outputs[\"config_json\"],\n",
    "                phasenet_op_.outputs[\"picks\"],\n",
    "                stations.outputs[\"station_json\"],\n",
    "                bucket_name=f\"catalogs\",\n",
    "                s3_url=s3_url,\n",
    "                secure=secure,\n",
    "            )\n",
    "            .set_cpu_request(\"800m\")\n",
    "            .set_retry(3)\n",
    "            .set_display_name(\"GaMMA Association\")\n",
    "        )\n",
    "        gamma_op_.execution_options.caching_strategy.max_cache_staleness = \"P30D\"\n",
    "\n",
    "    merge_op_ = (\n",
    "        merge_op(\n",
    "            config.outputs[\"index_json\"],\n",
    "            config.outputs[\"config_json\"],\n",
    "            bucket_name=f\"catalogs\",\n",
    "            s3_url=s3_url,\n",
    "            secure=secure,\n",
    "        )\n",
    "        .after(gamma_op_)\n",
    "        .set_memory_request(\"12G\")\n",
    "        .add_node_selector_constraint(\"cloud.google.com/gke-nodepool\", \"spot-64g\")\n",
    "        .set_display_name(\"Merge Catalog\")\n",
    "    )\n",
    "    merge_op_.execution_options.caching_strategy.max_cache_staleness = \"P30D\"\n",
    "\n",
    "    convert_station_op_ = (\n",
    "        convert_station_op(\n",
    "            config_json=config.outputs[\"config_json\"],\n",
    "            station_json=stations.outputs[\"station_json\"],\n",
    "            bucket_name=f\"catalogs\", s3_url=s3_url, secure=secure)\n",
    "        .add_node_selector_constraint(\"cloud.google.com/gke-nodepool\", \"spot-2g\")\n",
    "        .set_display_name(\"Convert Station Format\")\n",
    "    )\n",
    "    split_hypodd_op_ = (\n",
    "        split_hypodd_op(\n",
    "            config.outputs[\"config_json\"],\n",
    "            catalog_csv=merge_op_.outputs[\"catalog_csv\"],\n",
    "        )\n",
    "        .after(merge_op_)\n",
    "        .set_display_name(\"Split Catalog\")\n",
    "    )\n",
    "    split_hypodd_op_.execution_options.caching_strategy.max_cache_staleness = \"P30D\"\n",
    "    split_hypodd_op_.set_image_pull_policy(\"Always\")\n",
    "\n",
    "    with kfp.dsl.ParallelFor(split_hypodd_op_.outputs[\"output\"]) as i:\n",
    "\n",
    "        convert_phase_op_ = convert_phase_op(\n",
    "            i,\n",
    "            config_json=config.outputs[\"config_json\"],\n",
    "            picks_csv=merge_op_.outputs[\"picks_csv\"],\n",
    "            catalog_csv=merge_op_.outputs[\"catalog_csv\"],\n",
    "            bucket_name=\"catalogs\",\n",
    "            s3_url=s3_url,\n",
    "            secure=secure,\n",
    "        ).set_display_name(\"Convert Phase Format\")\n",
    "        convert_phase_op_.execution_options.caching_strategy.max_cache_staleness = \"P30D\"\n",
    "        convert_phase_op_.set_image_pull_policy(\"Always\")\n",
    "\n",
    "        ph2dt_op_ = ph2dt_op(\n",
    "            i,\n",
    "            config_json=config.outputs[\"config_json\"],\n",
    "            hypodd_phase=convert_phase_op_.outputs[\"hypodd_phase\"],\n",
    "            station_dat=convert_station_op_.outputs[\"hypodd_station\"],\n",
    "            bucket_name=\"catalogs\",\n",
    "            s3_url=s3_url,\n",
    "            secure=secure,\n",
    "        ).set_display_name(\"PH2DT\")\n",
    "        ph2dt_op_.execution_options.caching_strategy.max_cache_staleness = \"P30D\"\n",
    "        ph2dt_op_.set_image_pull_policy(\"Always\")\n",
    "\n",
    "        hypodd_ct_op_ = hypodd_ct_op(\n",
    "            i,\n",
    "            config_json=config.outputs[\"config_json\"],\n",
    "            ct=ph2dt_op_.outputs[\"ct\"],\n",
    "            event=ph2dt_op_.outputs[\"hypodd_event\"],\n",
    "            station=convert_station_op_.outputs[\"hypodd_station\"],\n",
    "            bucket_name=\"catalogs\",\n",
    "            s3_url=s3_url,\n",
    "            secure=secure,\n",
    "        ).set_display_name(\"HypoDD\")\n",
    "        hypodd_ct_op_.execution_options.caching_strategy.max_cache_staleness = \"P30D\"\n",
    "        hypodd_ct_op_.set_image_pull_policy(\"Always\")\n",
    "\n",
    "        # cc_op_ = cc_op(\n",
    "        #     ct=ph2dt_op_.outputs[\"ct\"],\n",
    "        #     picks=merge_op_.outputs[\"picks_csv\"],\n",
    "        #     catalog=merge_op_.outputs[\"catalog_csv\"],\n",
    "        # ).set_display_name('Cross Correlation')\n",
    "        # cc_op_.execution_options.caching_strategy.max_cache_staleness = \"P30D\"\n",
    "        # cc_op_.set_image_pull_policy(\"Always\")\n",
    "\n",
    "        # hypodd_cc_op_ = hypodd_cc_op(\n",
    "        #     i,\n",
    "        #     config_json=config.outputs[\"config_json\"],\n",
    "        #     ct=ph2dt_op_.outputs[\"ct\"],\n",
    "        #     cc=cc_op_.outputs[\"cc\"],\n",
    "        #     event=ph2dt_op_.outputs[\"hypodd_event\"],\n",
    "        #     station=convert_station_op_.outputs[\"hypodd_station\"],\n",
    "        #     bucket_name=\"catalogs\",\n",
    "        #     s3_url=s3_url,\n",
    "        #     secure=secure,\n",
    "        # ).set_display_name('HypoDD + CC')\n",
    "        # hypodd_cc_op_.execution_options.caching_strategy.max_cache_staleness = \"P30D\"\n",
    "        # hypodd_cc_op_.set_image_pull_policy(\"Always\")\n",
    "\n",
    "    merge_hypodd_op_ = (\n",
    "        merge_hypodd_op(\n",
    "            split_hypodd_op_.outputs[\"output\"],\n",
    "            config_json=config.outputs[\"config_json\"],\n",
    "            bucket_name=f\"catalogs\",\n",
    "            s3_url=s3_url,\n",
    "            secure=secure,\n",
    "        ).after(hypodd_ct_op_)\n",
    "        # .after(hypodd_cc_op_)\n",
    "        .set_display_name(\"Merge Catalog\")\n",
    "    )\n",
    "    merge_hypodd_op_.execution_options.caching_strategy.max_cache_staleness = \"P0D\"\n",
    "    merge_hypodd_op_.set_image_pull_policy(\"Always\")\n",
    "\n",
    "    visulization_op_ = (\n",
    "        visulization_op(\n",
    "            config_json=config.outputs[\"config_json\"],\n",
    "            hypodd_catalog_ct=merge_hypodd_op_.outputs[\"catalog_ct\"],\n",
    "            hypodd_catalog_cc=merge_hypodd_op_.outputs[\"catalog_cc\"],\n",
    "            gamma_catalog=merge_op_.outputs[\"catalog_csv\"],\n",
    "            standard_catalog=events.outputs[\"standard_catalog\"],\n",
    "            bucket_name=f\"catalogs\",\n",
    "            s3_url=s3_url,\n",
    "            secure=secure,\n",
    "        )\n",
    "        .after(merge_hypodd_op_)\n",
    "        .set_display_name(\"Visulization\")\n",
    "    )\n",
    "    visulization_op_.execution_options.caching_strategy.max_cache_staleness = \"P0D\"\n",
    "    visulization_op_.set_image_pull_policy(\"Always\")\n",
    "\n",
    "    # vop_.delete().after(merge_hypodd_op_)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "import os\n",
    "\n",
    "os.environ[\"GOOGLE_APPLICATION_CREDENTIALS\"] = \"/home/weiqiang/.dotbot/cloud/quakeflow_zhuwq.json\"\n",
    "experiment_name = \"QuakeFlow\"\n",
    "pipeline_func = quakeflow_pipeline\n",
    "run_name = f\"{pipeline_func.__name__}_{region_name.lower()}\"\n",
    "\n",
    "arguments = {\n",
    "    \"data_path\": \"/tmp\",\n",
    "    \"num_parallel\": 0,\n",
    "    \"bucket_catalog\": \"catalogs\",\n",
    "    \"s3_url\": \"minio-service:9000\",\n",
    "    \"secure\": False,\n",
    "}\n",
    "\n",
    "if not run_local:\n",
    "    pipeline_conf = kfp.dsl.PipelineConf()\n",
    "    pipeline_conf.set_image_pull_policy(\"Always\")\n",
    "    pipeline_conf.ttl_seconds_after_finished = 60 * 10\n",
    "    client = kfp.Client(host=\"670838cea8a18858-dot-us-west1.pipelines.googleusercontent.com\")\n",
    "    # client = kfp.Client(host=\"http://localhost:8080\")\n",
    "    kfp.compiler.Compiler().compile(pipeline_func, \"{}.zip\".format(experiment_name), pipeline_conf=pipeline_conf)\n",
    "    results = client.create_run_from_pipeline_func(\n",
    "        pipeline_func,\n",
    "        experiment_name=experiment_name,\n",
    "        run_name=run_name,\n",
    "        arguments=arguments,\n",
    "    )"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "quakeflow",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.20"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
